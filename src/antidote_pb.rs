// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/antidote_pb.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ApbErrorResp {
    // message fields
    errmsg: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    errcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbErrorResp {
    fn default() -> &'a ApbErrorResp {
        <ApbErrorResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbErrorResp {
    pub fn new() -> ApbErrorResp {
        ::std::default::Default::default()
    }

    // required bytes errmsg = 1;


    pub fn get_errmsg(&self) -> &[u8] {
        match self.errmsg.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_errmsg(&mut self) {
        self.errmsg.clear();
    }

    pub fn has_errmsg(&self) -> bool {
        self.errmsg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errmsg(&mut self, v: ::std::vec::Vec<u8>) {
        self.errmsg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errmsg(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.errmsg.is_none() {
            self.errmsg.set_default();
        }
        self.errmsg.as_mut().unwrap()
    }

    // Take field
    pub fn take_errmsg(&mut self) -> ::std::vec::Vec<u8> {
        self.errmsg.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 errcode = 2;


    pub fn get_errcode(&self) -> u32 {
        self.errcode.unwrap_or(0)
    }
    pub fn clear_errcode(&mut self) {
        self.errcode = ::std::option::Option::None;
    }

    pub fn has_errcode(&self) -> bool {
        self.errcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errcode(&mut self, v: u32) {
        self.errcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbErrorResp {
    fn is_initialized(&self) -> bool {
        if self.errmsg.is_none() {
            return false;
        }
        if self.errcode.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.errmsg)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.errmsg.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.errcode {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.errmsg.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.errcode {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbErrorResp {
        ApbErrorResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "errmsg",
                |m: &ApbErrorResp| { &m.errmsg },
                |m: &mut ApbErrorResp| { &mut m.errmsg },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errcode",
                |m: &ApbErrorResp| { &m.errcode },
                |m: &mut ApbErrorResp| { &mut m.errcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbErrorResp>(
                "ApbErrorResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbErrorResp {
        static instance: ::protobuf::rt::LazyV2<ApbErrorResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbErrorResp::new)
    }
}

impl ::protobuf::Clear for ApbErrorResp {
    fn clear(&mut self) {
        self.errmsg.clear();
        self.errcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbErrorResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbErrorResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCounterUpdate {
    // message fields
    inc: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbCounterUpdate {
    fn default() -> &'a ApbCounterUpdate {
        <ApbCounterUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ApbCounterUpdate {
    pub fn new() -> ApbCounterUpdate {
        ::std::default::Default::default()
    }

    // optional sint64 inc = 1;


    pub fn get_inc(&self) -> i64 {
        self.inc.unwrap_or(0)
    }
    pub fn clear_inc(&mut self) {
        self.inc = ::std::option::Option::None;
    }

    pub fn has_inc(&self) -> bool {
        self.inc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inc(&mut self, v: i64) {
        self.inc = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbCounterUpdate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.inc = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.inc {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.inc {
            os.write_sint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCounterUpdate {
        ApbCounterUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "inc",
                |m: &ApbCounterUpdate| { &m.inc },
                |m: &mut ApbCounterUpdate| { &mut m.inc },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbCounterUpdate>(
                "ApbCounterUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbCounterUpdate {
        static instance: ::protobuf::rt::LazyV2<ApbCounterUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbCounterUpdate::new)
    }
}

impl ::protobuf::Clear for ApbCounterUpdate {
    fn clear(&mut self) {
        self.inc = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCounterUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCounterUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetCounterResp {
    // message fields
    value: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetCounterResp {
    fn default() -> &'a ApbGetCounterResp {
        <ApbGetCounterResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetCounterResp {
    pub fn new() -> ApbGetCounterResp {
        ::std::default::Default::default()
    }

    // required sint32 value = 1;


    pub fn get_value(&self) -> i32 {
        self.value.unwrap_or(0)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbGetCounterResp {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_sint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetCounterResp {
        ApbGetCounterResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "value",
                |m: &ApbGetCounterResp| { &m.value },
                |m: &mut ApbGetCounterResp| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetCounterResp>(
                "ApbGetCounterResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetCounterResp {
        static instance: ::protobuf::rt::LazyV2<ApbGetCounterResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetCounterResp::new)
    }
}

impl ::protobuf::Clear for ApbGetCounterResp {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetCounterResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetCounterResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbSetUpdate {
    // message fields
    optype: ::std::option::Option<ApbSetUpdate_SetOpType>,
    pub adds: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub rems: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbSetUpdate {
    fn default() -> &'a ApbSetUpdate {
        <ApbSetUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ApbSetUpdate {
    pub fn new() -> ApbSetUpdate {
        ::std::default::Default::default()
    }

    // required .ApbSetUpdate.SetOpType optype = 1;


    pub fn get_optype(&self) -> ApbSetUpdate_SetOpType {
        self.optype.unwrap_or(ApbSetUpdate_SetOpType::ADD)
    }
    pub fn clear_optype(&mut self) {
        self.optype = ::std::option::Option::None;
    }

    pub fn has_optype(&self) -> bool {
        self.optype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optype(&mut self, v: ApbSetUpdate_SetOpType) {
        self.optype = ::std::option::Option::Some(v);
    }

    // repeated bytes adds = 2;


    pub fn get_adds(&self) -> &[::std::vec::Vec<u8>] {
        &self.adds
    }
    pub fn clear_adds(&mut self) {
        self.adds.clear();
    }

    // Param is passed by value, moved
    pub fn set_adds(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.adds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_adds(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.adds
    }

    // Take field
    pub fn take_adds(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.adds, ::protobuf::RepeatedField::new())
    }

    // repeated bytes rems = 3;


    pub fn get_rems(&self) -> &[::std::vec::Vec<u8>] {
        &self.rems
    }
    pub fn clear_rems(&mut self) {
        self.rems.clear();
    }

    // Param is passed by value, moved
    pub fn set_rems(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.rems = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rems(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.rems
    }

    // Take field
    pub fn take_rems(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.rems, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbSetUpdate {
    fn is_initialized(&self) -> bool {
        if self.optype.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.optype, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.adds)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.rems)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.optype {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.adds {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.rems {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.optype {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.adds {
            os.write_bytes(2, &v)?;
        };
        for v in &self.rems {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbSetUpdate {
        ApbSetUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApbSetUpdate_SetOpType>>(
                "optype",
                |m: &ApbSetUpdate| { &m.optype },
                |m: &mut ApbSetUpdate| { &mut m.optype },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "adds",
                |m: &ApbSetUpdate| { &m.adds },
                |m: &mut ApbSetUpdate| { &mut m.adds },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "rems",
                |m: &ApbSetUpdate| { &m.rems },
                |m: &mut ApbSetUpdate| { &mut m.rems },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbSetUpdate>(
                "ApbSetUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbSetUpdate {
        static instance: ::protobuf::rt::LazyV2<ApbSetUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbSetUpdate::new)
    }
}

impl ::protobuf::Clear for ApbSetUpdate {
    fn clear(&mut self) {
        self.optype = ::std::option::Option::None;
        self.adds.clear();
        self.rems.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbSetUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbSetUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ApbSetUpdate_SetOpType {
    ADD = 1,
    REMOVE = 2,
}

impl ::protobuf::ProtobufEnum for ApbSetUpdate_SetOpType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApbSetUpdate_SetOpType> {
        match value {
            1 => ::std::option::Option::Some(ApbSetUpdate_SetOpType::ADD),
            2 => ::std::option::Option::Some(ApbSetUpdate_SetOpType::REMOVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApbSetUpdate_SetOpType] = &[
            ApbSetUpdate_SetOpType::ADD,
            ApbSetUpdate_SetOpType::REMOVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ApbSetUpdate_SetOpType>("ApbSetUpdate.SetOpType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ApbSetUpdate_SetOpType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ApbSetUpdate_SetOpType {
    fn default() -> Self {
        ApbSetUpdate_SetOpType::ADD
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbSetUpdate_SetOpType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetSetResp {
    // message fields
    pub value: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetSetResp {
    fn default() -> &'a ApbGetSetResp {
        <ApbGetSetResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetSetResp {
    pub fn new() -> ApbGetSetResp {
        ::std::default::Default::default()
    }

    // repeated bytes value = 1;


    pub fn get_value(&self) -> &[::std::vec::Vec<u8>] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbGetSetResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetSetResp {
        ApbGetSetResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &ApbGetSetResp| { &m.value },
                |m: &mut ApbGetSetResp| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetSetResp>(
                "ApbGetSetResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetSetResp {
        static instance: ::protobuf::rt::LazyV2<ApbGetSetResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetSetResp::new)
    }
}

impl ::protobuf::Clear for ApbGetSetResp {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetSetResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetSetResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbRegUpdate {
    // message fields
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbRegUpdate {
    fn default() -> &'a ApbRegUpdate {
        <ApbRegUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ApbRegUpdate {
    pub fn new() -> ApbRegUpdate {
        ::std::default::Default::default()
    }

    // required bytes value = 1;


    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ApbRegUpdate {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbRegUpdate {
        ApbRegUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &ApbRegUpdate| { &m.value },
                |m: &mut ApbRegUpdate| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbRegUpdate>(
                "ApbRegUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbRegUpdate {
        static instance: ::protobuf::rt::LazyV2<ApbRegUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbRegUpdate::new)
    }
}

impl ::protobuf::Clear for ApbRegUpdate {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbRegUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbRegUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetRegResp {
    // message fields
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetRegResp {
    fn default() -> &'a ApbGetRegResp {
        <ApbGetRegResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetRegResp {
    pub fn new() -> ApbGetRegResp {
        ::std::default::Default::default()
    }

    // required bytes value = 1;


    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ApbGetRegResp {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetRegResp {
        ApbGetRegResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &ApbGetRegResp| { &m.value },
                |m: &mut ApbGetRegResp| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetRegResp>(
                "ApbGetRegResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetRegResp {
        static instance: ::protobuf::rt::LazyV2<ApbGetRegResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetRegResp::new)
    }
}

impl ::protobuf::Clear for ApbGetRegResp {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetRegResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetRegResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetMVRegResp {
    // message fields
    pub values: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetMVRegResp {
    fn default() -> &'a ApbGetMVRegResp {
        <ApbGetMVRegResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetMVRegResp {
    pub fn new() -> ApbGetMVRegResp {
        ::std::default::Default::default()
    }

    // repeated bytes values = 1;


    pub fn get_values(&self) -> &[::std::vec::Vec<u8>] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbGetMVRegResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetMVRegResp {
        ApbGetMVRegResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "values",
                |m: &ApbGetMVRegResp| { &m.values },
                |m: &mut ApbGetMVRegResp| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetMVRegResp>(
                "ApbGetMVRegResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetMVRegResp {
        static instance: ::protobuf::rt::LazyV2<ApbGetMVRegResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetMVRegResp::new)
    }
}

impl ::protobuf::Clear for ApbGetMVRegResp {
    fn clear(&mut self) {
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetMVRegResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetMVRegResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapKey {
    // message fields
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    field_type: ::std::option::Option<CRDT_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbMapKey {
    fn default() -> &'a ApbMapKey {
        <ApbMapKey as ::protobuf::Message>::default_instance()
    }
}

impl ApbMapKey {
    pub fn new() -> ApbMapKey {
        ::std::default::Default::default()
    }

    // required bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required .CRDT_type type = 2;


    pub fn get_field_type(&self) -> CRDT_type {
        self.field_type.unwrap_or(CRDT_type::COUNTER)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CRDT_type) {
        self.field_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbMapKey {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.field_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapKey {
        ApbMapKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &ApbMapKey| { &m.key },
                |m: &mut ApbMapKey| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CRDT_type>>(
                "type",
                |m: &ApbMapKey| { &m.field_type },
                |m: &mut ApbMapKey| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbMapKey>(
                "ApbMapKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbMapKey {
        static instance: ::protobuf::rt::LazyV2<ApbMapKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbMapKey::new)
    }
}

impl ::protobuf::Clear for ApbMapKey {
    fn clear(&mut self) {
        self.key.clear();
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapUpdate {
    // message fields
    pub updates: ::protobuf::RepeatedField<ApbMapNestedUpdate>,
    pub removedKeys: ::protobuf::RepeatedField<ApbMapKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbMapUpdate {
    fn default() -> &'a ApbMapUpdate {
        <ApbMapUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ApbMapUpdate {
    pub fn new() -> ApbMapUpdate {
        ::std::default::Default::default()
    }

    // repeated .ApbMapNestedUpdate updates = 1;


    pub fn get_updates(&self) -> &[ApbMapNestedUpdate] {
        &self.updates
    }
    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<ApbMapNestedUpdate>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<ApbMapNestedUpdate> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<ApbMapNestedUpdate> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }

    // repeated .ApbMapKey removedKeys = 2;


    pub fn get_removedKeys(&self) -> &[ApbMapKey] {
        &self.removedKeys
    }
    pub fn clear_removedKeys(&mut self) {
        self.removedKeys.clear();
    }

    // Param is passed by value, moved
    pub fn set_removedKeys(&mut self, v: ::protobuf::RepeatedField<ApbMapKey>) {
        self.removedKeys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removedKeys(&mut self) -> &mut ::protobuf::RepeatedField<ApbMapKey> {
        &mut self.removedKeys
    }

    // Take field
    pub fn take_removedKeys(&mut self) -> ::protobuf::RepeatedField<ApbMapKey> {
        ::std::mem::replace(&mut self.removedKeys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbMapUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.removedKeys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.removedKeys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.removedKeys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.updates {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.removedKeys {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapUpdate {
        ApbMapUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapNestedUpdate>>(
                "updates",
                |m: &ApbMapUpdate| { &m.updates },
                |m: &mut ApbMapUpdate| { &mut m.updates },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapKey>>(
                "removedKeys",
                |m: &ApbMapUpdate| { &m.removedKeys },
                |m: &mut ApbMapUpdate| { &mut m.removedKeys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbMapUpdate>(
                "ApbMapUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbMapUpdate {
        static instance: ::protobuf::rt::LazyV2<ApbMapUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbMapUpdate::new)
    }
}

impl ::protobuf::Clear for ApbMapUpdate {
    fn clear(&mut self) {
        self.updates.clear();
        self.removedKeys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapNestedUpdate {
    // message fields
    pub key: ::protobuf::SingularPtrField<ApbMapKey>,
    pub update: ::protobuf::SingularPtrField<ApbUpdateOperation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbMapNestedUpdate {
    fn default() -> &'a ApbMapNestedUpdate {
        <ApbMapNestedUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ApbMapNestedUpdate {
    pub fn new() -> ApbMapNestedUpdate {
        ::std::default::Default::default()
    }

    // required .ApbMapKey key = 1;


    pub fn get_key(&self) -> &ApbMapKey {
        self.key.as_ref().unwrap_or_else(|| <ApbMapKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ApbMapKey) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ApbMapKey {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ApbMapKey {
        self.key.take().unwrap_or_else(|| ApbMapKey::new())
    }

    // required .ApbUpdateOperation update = 2;


    pub fn get_update(&self) -> &ApbUpdateOperation {
        self.update.as_ref().unwrap_or_else(|| <ApbUpdateOperation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update(&mut self) {
        self.update.clear();
    }

    pub fn has_update(&self) -> bool {
        self.update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: ApbUpdateOperation) {
        self.update = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update(&mut self) -> &mut ApbUpdateOperation {
        if self.update.is_none() {
            self.update.set_default();
        }
        self.update.as_mut().unwrap()
    }

    // Take field
    pub fn take_update(&mut self) -> ApbUpdateOperation {
        self.update.take().unwrap_or_else(|| ApbUpdateOperation::new())
    }
}

impl ::protobuf::Message for ApbMapNestedUpdate {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.update.is_none() {
            return false;
        }
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapNestedUpdate {
        ApbMapNestedUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapKey>>(
                "key",
                |m: &ApbMapNestedUpdate| { &m.key },
                |m: &mut ApbMapNestedUpdate| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOperation>>(
                "update",
                |m: &ApbMapNestedUpdate| { &m.update },
                |m: &mut ApbMapNestedUpdate| { &mut m.update },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbMapNestedUpdate>(
                "ApbMapNestedUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbMapNestedUpdate {
        static instance: ::protobuf::rt::LazyV2<ApbMapNestedUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbMapNestedUpdate::new)
    }
}

impl ::protobuf::Clear for ApbMapNestedUpdate {
    fn clear(&mut self) {
        self.key.clear();
        self.update.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapNestedUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapNestedUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetMapResp {
    // message fields
    pub entries: ::protobuf::RepeatedField<ApbMapEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetMapResp {
    fn default() -> &'a ApbGetMapResp {
        <ApbGetMapResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetMapResp {
    pub fn new() -> ApbGetMapResp {
        ::std::default::Default::default()
    }

    // repeated .ApbMapEntry entries = 1;


    pub fn get_entries(&self) -> &[ApbMapEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<ApbMapEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<ApbMapEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<ApbMapEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbGetMapResp {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetMapResp {
        ApbGetMapResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapEntry>>(
                "entries",
                |m: &ApbGetMapResp| { &m.entries },
                |m: &mut ApbGetMapResp| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetMapResp>(
                "ApbGetMapResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetMapResp {
        static instance: ::protobuf::rt::LazyV2<ApbGetMapResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetMapResp::new)
    }
}

impl ::protobuf::Clear for ApbGetMapResp {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetMapResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetMapResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapEntry {
    // message fields
    pub key: ::protobuf::SingularPtrField<ApbMapKey>,
    pub value: ::protobuf::SingularPtrField<ApbReadObjectResp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbMapEntry {
    fn default() -> &'a ApbMapEntry {
        <ApbMapEntry as ::protobuf::Message>::default_instance()
    }
}

impl ApbMapEntry {
    pub fn new() -> ApbMapEntry {
        ::std::default::Default::default()
    }

    // required .ApbMapKey key = 1;


    pub fn get_key(&self) -> &ApbMapKey {
        self.key.as_ref().unwrap_or_else(|| <ApbMapKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ApbMapKey) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ApbMapKey {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ApbMapKey {
        self.key.take().unwrap_or_else(|| ApbMapKey::new())
    }

    // required .ApbReadObjectResp value = 2;


    pub fn get_value(&self) -> &ApbReadObjectResp {
        self.value.as_ref().unwrap_or_else(|| <ApbReadObjectResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ApbReadObjectResp) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ApbReadObjectResp {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ApbReadObjectResp {
        self.value.take().unwrap_or_else(|| ApbReadObjectResp::new())
    }
}

impl ::protobuf::Message for ApbMapEntry {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapEntry {
        ApbMapEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapKey>>(
                "key",
                |m: &ApbMapEntry| { &m.key },
                |m: &mut ApbMapEntry| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbReadObjectResp>>(
                "value",
                |m: &ApbMapEntry| { &m.value },
                |m: &mut ApbMapEntry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbMapEntry>(
                "ApbMapEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbMapEntry {
        static instance: ::protobuf::rt::LazyV2<ApbMapEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbMapEntry::new)
    }
}

impl ::protobuf::Clear for ApbMapEntry {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbFlagUpdate {
    // message fields
    value: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbFlagUpdate {
    fn default() -> &'a ApbFlagUpdate {
        <ApbFlagUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ApbFlagUpdate {
    pub fn new() -> ApbFlagUpdate {
        ::std::default::Default::default()
    }

    // required bool value = 1;


    pub fn get_value(&self) -> bool {
        self.value.unwrap_or(false)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbFlagUpdate {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbFlagUpdate {
        ApbFlagUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "value",
                |m: &ApbFlagUpdate| { &m.value },
                |m: &mut ApbFlagUpdate| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbFlagUpdate>(
                "ApbFlagUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbFlagUpdate {
        static instance: ::protobuf::rt::LazyV2<ApbFlagUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbFlagUpdate::new)
    }
}

impl ::protobuf::Clear for ApbFlagUpdate {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbFlagUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbFlagUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetFlagResp {
    // message fields
    value: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetFlagResp {
    fn default() -> &'a ApbGetFlagResp {
        <ApbGetFlagResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetFlagResp {
    pub fn new() -> ApbGetFlagResp {
        ::std::default::Default::default()
    }

    // required bool value = 1;


    pub fn get_value(&self) -> bool {
        self.value.unwrap_or(false)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbGetFlagResp {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetFlagResp {
        ApbGetFlagResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "value",
                |m: &ApbGetFlagResp| { &m.value },
                |m: &mut ApbGetFlagResp| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetFlagResp>(
                "ApbGetFlagResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetFlagResp {
        static instance: ::protobuf::rt::LazyV2<ApbGetFlagResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetFlagResp::new)
    }
}

impl ::protobuf::Clear for ApbGetFlagResp {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetFlagResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetFlagResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCrdtReset {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbCrdtReset {
    fn default() -> &'a ApbCrdtReset {
        <ApbCrdtReset as ::protobuf::Message>::default_instance()
    }
}

impl ApbCrdtReset {
    pub fn new() -> ApbCrdtReset {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ApbCrdtReset {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCrdtReset {
        ApbCrdtReset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbCrdtReset>(
                "ApbCrdtReset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbCrdtReset {
        static instance: ::protobuf::rt::LazyV2<ApbCrdtReset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbCrdtReset::new)
    }
}

impl ::protobuf::Clear for ApbCrdtReset {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCrdtReset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCrdtReset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbOperationResp {
    // message fields
    success: ::std::option::Option<bool>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbOperationResp {
    fn default() -> &'a ApbOperationResp {
        <ApbOperationResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbOperationResp {
    pub fn new() -> ApbOperationResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional uint32 errorcode = 2;


    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbOperationResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbOperationResp {
        ApbOperationResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ApbOperationResp| { &m.success },
                |m: &mut ApbOperationResp| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errorcode",
                |m: &ApbOperationResp| { &m.errorcode },
                |m: &mut ApbOperationResp| { &mut m.errorcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbOperationResp>(
                "ApbOperationResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbOperationResp {
        static instance: ::protobuf::rt::LazyV2<ApbOperationResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbOperationResp::new)
    }
}

impl ::protobuf::Clear for ApbOperationResp {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.errorcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbOperationResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbOperationResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbTxnProperties {
    // message fields
    read_write: ::std::option::Option<u32>,
    red_blue: ::std::option::Option<u32>,
    pub shared_locks: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub exclusive_locks: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbTxnProperties {
    fn default() -> &'a ApbTxnProperties {
        <ApbTxnProperties as ::protobuf::Message>::default_instance()
    }
}

impl ApbTxnProperties {
    pub fn new() -> ApbTxnProperties {
        ::std::default::Default::default()
    }

    // optional uint32 read_write = 1;


    pub fn get_read_write(&self) -> u32 {
        self.read_write.unwrap_or(0)
    }
    pub fn clear_read_write(&mut self) {
        self.read_write = ::std::option::Option::None;
    }

    pub fn has_read_write(&self) -> bool {
        self.read_write.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_write(&mut self, v: u32) {
        self.read_write = ::std::option::Option::Some(v);
    }

    // optional uint32 red_blue = 2;


    pub fn get_red_blue(&self) -> u32 {
        self.red_blue.unwrap_or(0)
    }
    pub fn clear_red_blue(&mut self) {
        self.red_blue = ::std::option::Option::None;
    }

    pub fn has_red_blue(&self) -> bool {
        self.red_blue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_red_blue(&mut self, v: u32) {
        self.red_blue = ::std::option::Option::Some(v);
    }

    // repeated bytes shared_locks = 3;


    pub fn get_shared_locks(&self) -> &[::std::vec::Vec<u8>] {
        &self.shared_locks
    }
    pub fn clear_shared_locks(&mut self) {
        self.shared_locks.clear();
    }

    // Param is passed by value, moved
    pub fn set_shared_locks(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.shared_locks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shared_locks(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.shared_locks
    }

    // Take field
    pub fn take_shared_locks(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.shared_locks, ::protobuf::RepeatedField::new())
    }

    // repeated bytes exclusive_locks = 4;


    pub fn get_exclusive_locks(&self) -> &[::std::vec::Vec<u8>] {
        &self.exclusive_locks
    }
    pub fn clear_exclusive_locks(&mut self) {
        self.exclusive_locks.clear();
    }

    // Param is passed by value, moved
    pub fn set_exclusive_locks(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.exclusive_locks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exclusive_locks(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.exclusive_locks
    }

    // Take field
    pub fn take_exclusive_locks(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.exclusive_locks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbTxnProperties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.read_write = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.red_blue = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.shared_locks)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.exclusive_locks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.read_write {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.red_blue {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shared_locks {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        for value in &self.exclusive_locks {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.read_write {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.red_blue {
            os.write_uint32(2, v)?;
        }
        for v in &self.shared_locks {
            os.write_bytes(3, &v)?;
        };
        for v in &self.exclusive_locks {
            os.write_bytes(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbTxnProperties {
        ApbTxnProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "read_write",
                |m: &ApbTxnProperties| { &m.read_write },
                |m: &mut ApbTxnProperties| { &mut m.read_write },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "red_blue",
                |m: &ApbTxnProperties| { &m.red_blue },
                |m: &mut ApbTxnProperties| { &mut m.red_blue },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "shared_locks",
                |m: &ApbTxnProperties| { &m.shared_locks },
                |m: &mut ApbTxnProperties| { &mut m.shared_locks },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "exclusive_locks",
                |m: &ApbTxnProperties| { &m.exclusive_locks },
                |m: &mut ApbTxnProperties| { &mut m.exclusive_locks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbTxnProperties>(
                "ApbTxnProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbTxnProperties {
        static instance: ::protobuf::rt::LazyV2<ApbTxnProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbTxnProperties::new)
    }
}

impl ::protobuf::Clear for ApbTxnProperties {
    fn clear(&mut self) {
        self.read_write = ::std::option::Option::None;
        self.red_blue = ::std::option::Option::None;
        self.shared_locks.clear();
        self.exclusive_locks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbTxnProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbTxnProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbBoundObject {
    // message fields
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    field_type: ::std::option::Option<CRDT_type>,
    bucket: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbBoundObject {
    fn default() -> &'a ApbBoundObject {
        <ApbBoundObject as ::protobuf::Message>::default_instance()
    }
}

impl ApbBoundObject {
    pub fn new() -> ApbBoundObject {
        ::std::default::Default::default()
    }

    // required bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required .CRDT_type type = 2;


    pub fn get_field_type(&self) -> CRDT_type {
        self.field_type.unwrap_or(CRDT_type::COUNTER)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CRDT_type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // required bytes bucket = 3;


    pub fn get_bucket(&self) -> &[u8] {
        match self.bucket.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    pub fn has_bucket(&self) -> bool {
        self.bucket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::vec::Vec<u8>) {
        self.bucket = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.bucket.is_none() {
            self.bucket.set_default();
        }
        self.bucket.as_mut().unwrap()
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::vec::Vec<u8> {
        self.bucket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ApbBoundObject {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.field_type.is_none() {
            return false;
        }
        if self.bucket.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.bucket)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.bucket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.bucket.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbBoundObject {
        ApbBoundObject::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &ApbBoundObject| { &m.key },
                |m: &mut ApbBoundObject| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CRDT_type>>(
                "type",
                |m: &ApbBoundObject| { &m.field_type },
                |m: &mut ApbBoundObject| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bucket",
                |m: &ApbBoundObject| { &m.bucket },
                |m: &mut ApbBoundObject| { &mut m.bucket },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbBoundObject>(
                "ApbBoundObject",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbBoundObject {
        static instance: ::protobuf::rt::LazyV2<ApbBoundObject> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbBoundObject::new)
    }
}

impl ::protobuf::Clear for ApbBoundObject {
    fn clear(&mut self) {
        self.key.clear();
        self.field_type = ::std::option::Option::None;
        self.bucket.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbBoundObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbBoundObject {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbReadObjects {
    // message fields
    pub boundobjects: ::protobuf::RepeatedField<ApbBoundObject>,
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbReadObjects {
    fn default() -> &'a ApbReadObjects {
        <ApbReadObjects as ::protobuf::Message>::default_instance()
    }
}

impl ApbReadObjects {
    pub fn new() -> ApbReadObjects {
        ::std::default::Default::default()
    }

    // repeated .ApbBoundObject boundobjects = 1;


    pub fn get_boundobjects(&self) -> &[ApbBoundObject] {
        &self.boundobjects
    }
    pub fn clear_boundobjects(&mut self) {
        self.boundobjects.clear();
    }

    // Param is passed by value, moved
    pub fn set_boundobjects(&mut self, v: ::protobuf::RepeatedField<ApbBoundObject>) {
        self.boundobjects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_boundobjects(&mut self) -> &mut ::protobuf::RepeatedField<ApbBoundObject> {
        &mut self.boundobjects
    }

    // Take field
    pub fn take_boundobjects(&mut self) -> ::protobuf::RepeatedField<ApbBoundObject> {
        ::std::mem::replace(&mut self.boundobjects, ::protobuf::RepeatedField::new())
    }

    // required bytes transaction_descriptor = 2;


    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ApbReadObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        for v in &self.boundobjects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.boundobjects)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.boundobjects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.boundobjects {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbReadObjects {
        ApbReadObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbBoundObject>>(
                "boundobjects",
                |m: &ApbReadObjects| { &m.boundobjects },
                |m: &mut ApbReadObjects| { &mut m.boundobjects },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transaction_descriptor",
                |m: &ApbReadObjects| { &m.transaction_descriptor },
                |m: &mut ApbReadObjects| { &mut m.transaction_descriptor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbReadObjects>(
                "ApbReadObjects",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbReadObjects {
        static instance: ::protobuf::rt::LazyV2<ApbReadObjects> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbReadObjects::new)
    }
}

impl ::protobuf::Clear for ApbReadObjects {
    fn clear(&mut self) {
        self.boundobjects.clear();
        self.transaction_descriptor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbReadObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbReadObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbUpdateOp {
    // message fields
    pub boundobject: ::protobuf::SingularPtrField<ApbBoundObject>,
    pub operation: ::protobuf::SingularPtrField<ApbUpdateOperation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbUpdateOp {
    fn default() -> &'a ApbUpdateOp {
        <ApbUpdateOp as ::protobuf::Message>::default_instance()
    }
}

impl ApbUpdateOp {
    pub fn new() -> ApbUpdateOp {
        ::std::default::Default::default()
    }

    // required .ApbBoundObject boundobject = 1;


    pub fn get_boundobject(&self) -> &ApbBoundObject {
        self.boundobject.as_ref().unwrap_or_else(|| <ApbBoundObject as ::protobuf::Message>::default_instance())
    }
    pub fn clear_boundobject(&mut self) {
        self.boundobject.clear();
    }

    pub fn has_boundobject(&self) -> bool {
        self.boundobject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boundobject(&mut self, v: ApbBoundObject) {
        self.boundobject = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boundobject(&mut self) -> &mut ApbBoundObject {
        if self.boundobject.is_none() {
            self.boundobject.set_default();
        }
        self.boundobject.as_mut().unwrap()
    }

    // Take field
    pub fn take_boundobject(&mut self) -> ApbBoundObject {
        self.boundobject.take().unwrap_or_else(|| ApbBoundObject::new())
    }

    // required .ApbUpdateOperation operation = 2;


    pub fn get_operation(&self) -> &ApbUpdateOperation {
        self.operation.as_ref().unwrap_or_else(|| <ApbUpdateOperation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_operation(&mut self) {
        self.operation.clear();
    }

    pub fn has_operation(&self) -> bool {
        self.operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: ApbUpdateOperation) {
        self.operation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation(&mut self) -> &mut ApbUpdateOperation {
        if self.operation.is_none() {
            self.operation.set_default();
        }
        self.operation.as_mut().unwrap()
    }

    // Take field
    pub fn take_operation(&mut self) -> ApbUpdateOperation {
        self.operation.take().unwrap_or_else(|| ApbUpdateOperation::new())
    }
}

impl ::protobuf::Message for ApbUpdateOp {
    fn is_initialized(&self) -> bool {
        if self.boundobject.is_none() {
            return false;
        }
        if self.operation.is_none() {
            return false;
        }
        for v in &self.boundobject {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.boundobject)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.boundobject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.operation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.boundobject.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.operation.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbUpdateOp {
        ApbUpdateOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbBoundObject>>(
                "boundobject",
                |m: &ApbUpdateOp| { &m.boundobject },
                |m: &mut ApbUpdateOp| { &mut m.boundobject },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOperation>>(
                "operation",
                |m: &ApbUpdateOp| { &m.operation },
                |m: &mut ApbUpdateOp| { &mut m.operation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbUpdateOp>(
                "ApbUpdateOp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbUpdateOp {
        static instance: ::protobuf::rt::LazyV2<ApbUpdateOp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbUpdateOp::new)
    }
}

impl ::protobuf::Clear for ApbUpdateOp {
    fn clear(&mut self) {
        self.boundobject.clear();
        self.operation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbUpdateOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbUpdateOp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbUpdateOperation {
    // message fields
    pub counterop: ::protobuf::SingularPtrField<ApbCounterUpdate>,
    pub setop: ::protobuf::SingularPtrField<ApbSetUpdate>,
    pub regop: ::protobuf::SingularPtrField<ApbRegUpdate>,
    pub mapop: ::protobuf::SingularPtrField<ApbMapUpdate>,
    pub resetop: ::protobuf::SingularPtrField<ApbCrdtReset>,
    pub flagop: ::protobuf::SingularPtrField<ApbFlagUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbUpdateOperation {
    fn default() -> &'a ApbUpdateOperation {
        <ApbUpdateOperation as ::protobuf::Message>::default_instance()
    }
}

impl ApbUpdateOperation {
    pub fn new() -> ApbUpdateOperation {
        ::std::default::Default::default()
    }

    // optional .ApbCounterUpdate counterop = 1;


    pub fn get_counterop(&self) -> &ApbCounterUpdate {
        self.counterop.as_ref().unwrap_or_else(|| <ApbCounterUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counterop(&mut self) {
        self.counterop.clear();
    }

    pub fn has_counterop(&self) -> bool {
        self.counterop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterop(&mut self, v: ApbCounterUpdate) {
        self.counterop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterop(&mut self) -> &mut ApbCounterUpdate {
        if self.counterop.is_none() {
            self.counterop.set_default();
        }
        self.counterop.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterop(&mut self) -> ApbCounterUpdate {
        self.counterop.take().unwrap_or_else(|| ApbCounterUpdate::new())
    }

    // optional .ApbSetUpdate setop = 2;


    pub fn get_setop(&self) -> &ApbSetUpdate {
        self.setop.as_ref().unwrap_or_else(|| <ApbSetUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_setop(&mut self) {
        self.setop.clear();
    }

    pub fn has_setop(&self) -> bool {
        self.setop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_setop(&mut self, v: ApbSetUpdate) {
        self.setop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_setop(&mut self) -> &mut ApbSetUpdate {
        if self.setop.is_none() {
            self.setop.set_default();
        }
        self.setop.as_mut().unwrap()
    }

    // Take field
    pub fn take_setop(&mut self) -> ApbSetUpdate {
        self.setop.take().unwrap_or_else(|| ApbSetUpdate::new())
    }

    // optional .ApbRegUpdate regop = 3;


    pub fn get_regop(&self) -> &ApbRegUpdate {
        self.regop.as_ref().unwrap_or_else(|| <ApbRegUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regop(&mut self) {
        self.regop.clear();
    }

    pub fn has_regop(&self) -> bool {
        self.regop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regop(&mut self, v: ApbRegUpdate) {
        self.regop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regop(&mut self) -> &mut ApbRegUpdate {
        if self.regop.is_none() {
            self.regop.set_default();
        }
        self.regop.as_mut().unwrap()
    }

    // Take field
    pub fn take_regop(&mut self) -> ApbRegUpdate {
        self.regop.take().unwrap_or_else(|| ApbRegUpdate::new())
    }

    // optional .ApbMapUpdate mapop = 5;


    pub fn get_mapop(&self) -> &ApbMapUpdate {
        self.mapop.as_ref().unwrap_or_else(|| <ApbMapUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_mapop(&mut self) {
        self.mapop.clear();
    }

    pub fn has_mapop(&self) -> bool {
        self.mapop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mapop(&mut self, v: ApbMapUpdate) {
        self.mapop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mapop(&mut self) -> &mut ApbMapUpdate {
        if self.mapop.is_none() {
            self.mapop.set_default();
        }
        self.mapop.as_mut().unwrap()
    }

    // Take field
    pub fn take_mapop(&mut self) -> ApbMapUpdate {
        self.mapop.take().unwrap_or_else(|| ApbMapUpdate::new())
    }

    // optional .ApbCrdtReset resetop = 6;


    pub fn get_resetop(&self) -> &ApbCrdtReset {
        self.resetop.as_ref().unwrap_or_else(|| <ApbCrdtReset as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resetop(&mut self) {
        self.resetop.clear();
    }

    pub fn has_resetop(&self) -> bool {
        self.resetop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resetop(&mut self, v: ApbCrdtReset) {
        self.resetop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resetop(&mut self) -> &mut ApbCrdtReset {
        if self.resetop.is_none() {
            self.resetop.set_default();
        }
        self.resetop.as_mut().unwrap()
    }

    // Take field
    pub fn take_resetop(&mut self) -> ApbCrdtReset {
        self.resetop.take().unwrap_or_else(|| ApbCrdtReset::new())
    }

    // optional .ApbFlagUpdate flagop = 7;


    pub fn get_flagop(&self) -> &ApbFlagUpdate {
        self.flagop.as_ref().unwrap_or_else(|| <ApbFlagUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_flagop(&mut self) {
        self.flagop.clear();
    }

    pub fn has_flagop(&self) -> bool {
        self.flagop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flagop(&mut self, v: ApbFlagUpdate) {
        self.flagop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flagop(&mut self) -> &mut ApbFlagUpdate {
        if self.flagop.is_none() {
            self.flagop.set_default();
        }
        self.flagop.as_mut().unwrap()
    }

    // Take field
    pub fn take_flagop(&mut self) -> ApbFlagUpdate {
        self.flagop.take().unwrap_or_else(|| ApbFlagUpdate::new())
    }
}

impl ::protobuf::Message for ApbUpdateOperation {
    fn is_initialized(&self) -> bool {
        for v in &self.counterop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.setop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mapop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resetop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.flagop {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterop)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.setop)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regop)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mapop)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resetop)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.flagop)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.counterop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.setop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.mapop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.resetop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.flagop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.counterop.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.setop.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regop.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.mapop.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.resetop.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.flagop.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbUpdateOperation {
        ApbUpdateOperation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbCounterUpdate>>(
                "counterop",
                |m: &ApbUpdateOperation| { &m.counterop },
                |m: &mut ApbUpdateOperation| { &mut m.counterop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbSetUpdate>>(
                "setop",
                |m: &ApbUpdateOperation| { &m.setop },
                |m: &mut ApbUpdateOperation| { &mut m.setop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbRegUpdate>>(
                "regop",
                |m: &ApbUpdateOperation| { &m.regop },
                |m: &mut ApbUpdateOperation| { &mut m.regop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapUpdate>>(
                "mapop",
                |m: &ApbUpdateOperation| { &m.mapop },
                |m: &mut ApbUpdateOperation| { &mut m.mapop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbCrdtReset>>(
                "resetop",
                |m: &ApbUpdateOperation| { &m.resetop },
                |m: &mut ApbUpdateOperation| { &mut m.resetop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbFlagUpdate>>(
                "flagop",
                |m: &ApbUpdateOperation| { &m.flagop },
                |m: &mut ApbUpdateOperation| { &mut m.flagop },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbUpdateOperation>(
                "ApbUpdateOperation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbUpdateOperation {
        static instance: ::protobuf::rt::LazyV2<ApbUpdateOperation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbUpdateOperation::new)
    }
}

impl ::protobuf::Clear for ApbUpdateOperation {
    fn clear(&mut self) {
        self.counterop.clear();
        self.setop.clear();
        self.regop.clear();
        self.mapop.clear();
        self.resetop.clear();
        self.flagop.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbUpdateOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbUpdateOperation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbUpdateObjects {
    // message fields
    pub updates: ::protobuf::RepeatedField<ApbUpdateOp>,
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbUpdateObjects {
    fn default() -> &'a ApbUpdateObjects {
        <ApbUpdateObjects as ::protobuf::Message>::default_instance()
    }
}

impl ApbUpdateObjects {
    pub fn new() -> ApbUpdateObjects {
        ::std::default::Default::default()
    }

    // repeated .ApbUpdateOp updates = 1;


    pub fn get_updates(&self) -> &[ApbUpdateOp] {
        &self.updates
    }
    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<ApbUpdateOp>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<ApbUpdateOp> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<ApbUpdateOp> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }

    // required bytes transaction_descriptor = 2;


    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ApbUpdateObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.updates {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbUpdateObjects {
        ApbUpdateObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOp>>(
                "updates",
                |m: &ApbUpdateObjects| { &m.updates },
                |m: &mut ApbUpdateObjects| { &mut m.updates },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transaction_descriptor",
                |m: &ApbUpdateObjects| { &m.transaction_descriptor },
                |m: &mut ApbUpdateObjects| { &mut m.transaction_descriptor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbUpdateObjects>(
                "ApbUpdateObjects",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbUpdateObjects {
        static instance: ::protobuf::rt::LazyV2<ApbUpdateObjects> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbUpdateObjects::new)
    }
}

impl ::protobuf::Clear for ApbUpdateObjects {
    fn clear(&mut self) {
        self.updates.clear();
        self.transaction_descriptor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbUpdateObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbUpdateObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStartTransaction {
    // message fields
    timestamp: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub properties: ::protobuf::SingularPtrField<ApbTxnProperties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbStartTransaction {
    fn default() -> &'a ApbStartTransaction {
        <ApbStartTransaction as ::protobuf::Message>::default_instance()
    }
}

impl ApbStartTransaction {
    pub fn new() -> ApbStartTransaction {
        ::std::default::Default::default()
    }

    // optional bytes timestamp = 1;


    pub fn get_timestamp(&self) -> &[u8] {
        match self.timestamp.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::vec::Vec<u8>) {
        self.timestamp = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::vec::Vec<u8> {
        self.timestamp.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .ApbTxnProperties properties = 2;


    pub fn get_properties(&self) -> &ApbTxnProperties {
        self.properties.as_ref().unwrap_or_else(|| <ApbTxnProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    pub fn has_properties(&self) -> bool {
        self.properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ApbTxnProperties) {
        self.properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_properties(&mut self) -> &mut ApbTxnProperties {
        if self.properties.is_none() {
            self.properties.set_default();
        }
        self.properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_properties(&mut self) -> ApbTxnProperties {
        self.properties.take().unwrap_or_else(|| ApbTxnProperties::new())
    }
}

impl ::protobuf::Message for ApbStartTransaction {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.properties.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStartTransaction {
        ApbStartTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "timestamp",
                |m: &ApbStartTransaction| { &m.timestamp },
                |m: &mut ApbStartTransaction| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbTxnProperties>>(
                "properties",
                |m: &ApbStartTransaction| { &m.properties },
                |m: &mut ApbStartTransaction| { &mut m.properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbStartTransaction>(
                "ApbStartTransaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbStartTransaction {
        static instance: ::protobuf::rt::LazyV2<ApbStartTransaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbStartTransaction::new)
    }
}

impl ::protobuf::Clear for ApbStartTransaction {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStartTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStartTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbAbortTransaction {
    // message fields
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbAbortTransaction {
    fn default() -> &'a ApbAbortTransaction {
        <ApbAbortTransaction as ::protobuf::Message>::default_instance()
    }
}

impl ApbAbortTransaction {
    pub fn new() -> ApbAbortTransaction {
        ::std::default::Default::default()
    }

    // required bytes transaction_descriptor = 1;


    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ApbAbortTransaction {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbAbortTransaction {
        ApbAbortTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transaction_descriptor",
                |m: &ApbAbortTransaction| { &m.transaction_descriptor },
                |m: &mut ApbAbortTransaction| { &mut m.transaction_descriptor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbAbortTransaction>(
                "ApbAbortTransaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbAbortTransaction {
        static instance: ::protobuf::rt::LazyV2<ApbAbortTransaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbAbortTransaction::new)
    }
}

impl ::protobuf::Clear for ApbAbortTransaction {
    fn clear(&mut self) {
        self.transaction_descriptor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbAbortTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbAbortTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCommitTransaction {
    // message fields
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbCommitTransaction {
    fn default() -> &'a ApbCommitTransaction {
        <ApbCommitTransaction as ::protobuf::Message>::default_instance()
    }
}

impl ApbCommitTransaction {
    pub fn new() -> ApbCommitTransaction {
        ::std::default::Default::default()
    }

    // required bytes transaction_descriptor = 1;


    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ApbCommitTransaction {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCommitTransaction {
        ApbCommitTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transaction_descriptor",
                |m: &ApbCommitTransaction| { &m.transaction_descriptor },
                |m: &mut ApbCommitTransaction| { &mut m.transaction_descriptor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbCommitTransaction>(
                "ApbCommitTransaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbCommitTransaction {
        static instance: ::protobuf::rt::LazyV2<ApbCommitTransaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbCommitTransaction::new)
    }
}

impl ::protobuf::Clear for ApbCommitTransaction {
    fn clear(&mut self) {
        self.transaction_descriptor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCommitTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCommitTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStaticUpdateObjects {
    // message fields
    pub transaction: ::protobuf::SingularPtrField<ApbStartTransaction>,
    pub updates: ::protobuf::RepeatedField<ApbUpdateOp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbStaticUpdateObjects {
    fn default() -> &'a ApbStaticUpdateObjects {
        <ApbStaticUpdateObjects as ::protobuf::Message>::default_instance()
    }
}

impl ApbStaticUpdateObjects {
    pub fn new() -> ApbStaticUpdateObjects {
        ::std::default::Default::default()
    }

    // required .ApbStartTransaction transaction = 1;


    pub fn get_transaction(&self) -> &ApbStartTransaction {
        self.transaction.as_ref().unwrap_or_else(|| <ApbStartTransaction as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ApbStartTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ApbStartTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> ApbStartTransaction {
        self.transaction.take().unwrap_or_else(|| ApbStartTransaction::new())
    }

    // repeated .ApbUpdateOp updates = 2;


    pub fn get_updates(&self) -> &[ApbUpdateOp] {
        &self.updates
    }
    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<ApbUpdateOp>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<ApbUpdateOp> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<ApbUpdateOp> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbStaticUpdateObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction.is_none() {
            return false;
        }
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.updates {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStaticUpdateObjects {
        ApbStaticUpdateObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbStartTransaction>>(
                "transaction",
                |m: &ApbStaticUpdateObjects| { &m.transaction },
                |m: &mut ApbStaticUpdateObjects| { &mut m.transaction },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOp>>(
                "updates",
                |m: &ApbStaticUpdateObjects| { &m.updates },
                |m: &mut ApbStaticUpdateObjects| { &mut m.updates },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbStaticUpdateObjects>(
                "ApbStaticUpdateObjects",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbStaticUpdateObjects {
        static instance: ::protobuf::rt::LazyV2<ApbStaticUpdateObjects> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbStaticUpdateObjects::new)
    }
}

impl ::protobuf::Clear for ApbStaticUpdateObjects {
    fn clear(&mut self) {
        self.transaction.clear();
        self.updates.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStaticUpdateObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStaticUpdateObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStaticReadObjects {
    // message fields
    pub transaction: ::protobuf::SingularPtrField<ApbStartTransaction>,
    pub objects: ::protobuf::RepeatedField<ApbBoundObject>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbStaticReadObjects {
    fn default() -> &'a ApbStaticReadObjects {
        <ApbStaticReadObjects as ::protobuf::Message>::default_instance()
    }
}

impl ApbStaticReadObjects {
    pub fn new() -> ApbStaticReadObjects {
        ::std::default::Default::default()
    }

    // required .ApbStartTransaction transaction = 1;


    pub fn get_transaction(&self) -> &ApbStartTransaction {
        self.transaction.as_ref().unwrap_or_else(|| <ApbStartTransaction as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ApbStartTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ApbStartTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> ApbStartTransaction {
        self.transaction.take().unwrap_or_else(|| ApbStartTransaction::new())
    }

    // repeated .ApbBoundObject objects = 2;


    pub fn get_objects(&self) -> &[ApbBoundObject] {
        &self.objects
    }
    pub fn clear_objects(&mut self) {
        self.objects.clear();
    }

    // Param is passed by value, moved
    pub fn set_objects(&mut self, v: ::protobuf::RepeatedField<ApbBoundObject>) {
        self.objects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_objects(&mut self) -> &mut ::protobuf::RepeatedField<ApbBoundObject> {
        &mut self.objects
    }

    // Take field
    pub fn take_objects(&mut self) -> ::protobuf::RepeatedField<ApbBoundObject> {
        ::std::mem::replace(&mut self.objects, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbStaticReadObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction.is_none() {
            return false;
        }
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.objects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.objects)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.objects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.objects {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStaticReadObjects {
        ApbStaticReadObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbStartTransaction>>(
                "transaction",
                |m: &ApbStaticReadObjects| { &m.transaction },
                |m: &mut ApbStaticReadObjects| { &mut m.transaction },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbBoundObject>>(
                "objects",
                |m: &ApbStaticReadObjects| { &m.objects },
                |m: &mut ApbStaticReadObjects| { &mut m.objects },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbStaticReadObjects>(
                "ApbStaticReadObjects",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbStaticReadObjects {
        static instance: ::protobuf::rt::LazyV2<ApbStaticReadObjects> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbStaticReadObjects::new)
    }
}

impl ::protobuf::Clear for ApbStaticReadObjects {
    fn clear(&mut self) {
        self.transaction.clear();
        self.objects.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStaticReadObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStaticReadObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStartTransactionResp {
    // message fields
    success: ::std::option::Option<bool>,
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbStartTransactionResp {
    fn default() -> &'a ApbStartTransactionResp {
        <ApbStartTransactionResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbStartTransactionResp {
    pub fn new() -> ApbStartTransactionResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional bytes transaction_descriptor = 2;


    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 errorcode = 3;


    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbStartTransactionResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStartTransactionResp {
        ApbStartTransactionResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ApbStartTransactionResp| { &m.success },
                |m: &mut ApbStartTransactionResp| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transaction_descriptor",
                |m: &ApbStartTransactionResp| { &m.transaction_descriptor },
                |m: &mut ApbStartTransactionResp| { &mut m.transaction_descriptor },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errorcode",
                |m: &ApbStartTransactionResp| { &m.errorcode },
                |m: &mut ApbStartTransactionResp| { &mut m.errorcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbStartTransactionResp>(
                "ApbStartTransactionResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbStartTransactionResp {
        static instance: ::protobuf::rt::LazyV2<ApbStartTransactionResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbStartTransactionResp::new)
    }
}

impl ::protobuf::Clear for ApbStartTransactionResp {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.transaction_descriptor.clear();
        self.errorcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStartTransactionResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStartTransactionResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbReadObjectResp {
    // message fields
    pub counter: ::protobuf::SingularPtrField<ApbGetCounterResp>,
    pub set: ::protobuf::SingularPtrField<ApbGetSetResp>,
    pub reg: ::protobuf::SingularPtrField<ApbGetRegResp>,
    pub mvreg: ::protobuf::SingularPtrField<ApbGetMVRegResp>,
    pub map: ::protobuf::SingularPtrField<ApbGetMapResp>,
    pub flag: ::protobuf::SingularPtrField<ApbGetFlagResp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbReadObjectResp {
    fn default() -> &'a ApbReadObjectResp {
        <ApbReadObjectResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbReadObjectResp {
    pub fn new() -> ApbReadObjectResp {
        ::std::default::Default::default()
    }

    // optional .ApbGetCounterResp counter = 1;


    pub fn get_counter(&self) -> &ApbGetCounterResp {
        self.counter.as_ref().unwrap_or_else(|| <ApbGetCounterResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counter(&mut self) {
        self.counter.clear();
    }

    pub fn has_counter(&self) -> bool {
        self.counter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counter(&mut self, v: ApbGetCounterResp) {
        self.counter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter(&mut self) -> &mut ApbGetCounterResp {
        if self.counter.is_none() {
            self.counter.set_default();
        }
        self.counter.as_mut().unwrap()
    }

    // Take field
    pub fn take_counter(&mut self) -> ApbGetCounterResp {
        self.counter.take().unwrap_or_else(|| ApbGetCounterResp::new())
    }

    // optional .ApbGetSetResp set = 2;


    pub fn get_set(&self) -> &ApbGetSetResp {
        self.set.as_ref().unwrap_or_else(|| <ApbGetSetResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_set(&mut self) {
        self.set.clear();
    }

    pub fn has_set(&self) -> bool {
        self.set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: ApbGetSetResp) {
        self.set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_set(&mut self) -> &mut ApbGetSetResp {
        if self.set.is_none() {
            self.set.set_default();
        }
        self.set.as_mut().unwrap()
    }

    // Take field
    pub fn take_set(&mut self) -> ApbGetSetResp {
        self.set.take().unwrap_or_else(|| ApbGetSetResp::new())
    }

    // optional .ApbGetRegResp reg = 3;


    pub fn get_reg(&self) -> &ApbGetRegResp {
        self.reg.as_ref().unwrap_or_else(|| <ApbGetRegResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reg(&mut self) {
        self.reg.clear();
    }

    pub fn has_reg(&self) -> bool {
        self.reg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reg(&mut self, v: ApbGetRegResp) {
        self.reg = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reg(&mut self) -> &mut ApbGetRegResp {
        if self.reg.is_none() {
            self.reg.set_default();
        }
        self.reg.as_mut().unwrap()
    }

    // Take field
    pub fn take_reg(&mut self) -> ApbGetRegResp {
        self.reg.take().unwrap_or_else(|| ApbGetRegResp::new())
    }

    // optional .ApbGetMVRegResp mvreg = 4;


    pub fn get_mvreg(&self) -> &ApbGetMVRegResp {
        self.mvreg.as_ref().unwrap_or_else(|| <ApbGetMVRegResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_mvreg(&mut self) {
        self.mvreg.clear();
    }

    pub fn has_mvreg(&self) -> bool {
        self.mvreg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mvreg(&mut self, v: ApbGetMVRegResp) {
        self.mvreg = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mvreg(&mut self) -> &mut ApbGetMVRegResp {
        if self.mvreg.is_none() {
            self.mvreg.set_default();
        }
        self.mvreg.as_mut().unwrap()
    }

    // Take field
    pub fn take_mvreg(&mut self) -> ApbGetMVRegResp {
        self.mvreg.take().unwrap_or_else(|| ApbGetMVRegResp::new())
    }

    // optional .ApbGetMapResp map = 6;


    pub fn get_map(&self) -> &ApbGetMapResp {
        self.map.as_ref().unwrap_or_else(|| <ApbGetMapResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_map(&mut self) {
        self.map.clear();
    }

    pub fn has_map(&self) -> bool {
        self.map.is_some()
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: ApbGetMapResp) {
        self.map = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_map(&mut self) -> &mut ApbGetMapResp {
        if self.map.is_none() {
            self.map.set_default();
        }
        self.map.as_mut().unwrap()
    }

    // Take field
    pub fn take_map(&mut self) -> ApbGetMapResp {
        self.map.take().unwrap_or_else(|| ApbGetMapResp::new())
    }

    // optional .ApbGetFlagResp flag = 7;


    pub fn get_flag(&self) -> &ApbGetFlagResp {
        self.flag.as_ref().unwrap_or_else(|| <ApbGetFlagResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_flag(&mut self) {
        self.flag.clear();
    }

    pub fn has_flag(&self) -> bool {
        self.flag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flag(&mut self, v: ApbGetFlagResp) {
        self.flag = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flag(&mut self) -> &mut ApbGetFlagResp {
        if self.flag.is_none() {
            self.flag.set_default();
        }
        self.flag.as_mut().unwrap()
    }

    // Take field
    pub fn take_flag(&mut self) -> ApbGetFlagResp {
        self.flag.take().unwrap_or_else(|| ApbGetFlagResp::new())
    }
}

impl ::protobuf::Message for ApbReadObjectResp {
    fn is_initialized(&self) -> bool {
        for v in &self.counter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.set {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reg {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mvreg {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.map {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.flag {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.set)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reg)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mvreg)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.map)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.flag)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.counter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.mvreg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.map.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.flag.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.counter.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.set.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reg.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.mvreg.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.map.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.flag.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbReadObjectResp {
        ApbReadObjectResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetCounterResp>>(
                "counter",
                |m: &ApbReadObjectResp| { &m.counter },
                |m: &mut ApbReadObjectResp| { &mut m.counter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetSetResp>>(
                "set",
                |m: &ApbReadObjectResp| { &m.set },
                |m: &mut ApbReadObjectResp| { &mut m.set },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetRegResp>>(
                "reg",
                |m: &ApbReadObjectResp| { &m.reg },
                |m: &mut ApbReadObjectResp| { &mut m.reg },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetMVRegResp>>(
                "mvreg",
                |m: &ApbReadObjectResp| { &m.mvreg },
                |m: &mut ApbReadObjectResp| { &mut m.mvreg },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetMapResp>>(
                "map",
                |m: &ApbReadObjectResp| { &m.map },
                |m: &mut ApbReadObjectResp| { &mut m.map },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetFlagResp>>(
                "flag",
                |m: &ApbReadObjectResp| { &m.flag },
                |m: &mut ApbReadObjectResp| { &mut m.flag },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbReadObjectResp>(
                "ApbReadObjectResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbReadObjectResp {
        static instance: ::protobuf::rt::LazyV2<ApbReadObjectResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbReadObjectResp::new)
    }
}

impl ::protobuf::Clear for ApbReadObjectResp {
    fn clear(&mut self) {
        self.counter.clear();
        self.set.clear();
        self.reg.clear();
        self.mvreg.clear();
        self.map.clear();
        self.flag.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbReadObjectResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbReadObjectResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbReadObjectsResp {
    // message fields
    success: ::std::option::Option<bool>,
    pub objects: ::protobuf::RepeatedField<ApbReadObjectResp>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbReadObjectsResp {
    fn default() -> &'a ApbReadObjectsResp {
        <ApbReadObjectsResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbReadObjectsResp {
    pub fn new() -> ApbReadObjectsResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // repeated .ApbReadObjectResp objects = 2;


    pub fn get_objects(&self) -> &[ApbReadObjectResp] {
        &self.objects
    }
    pub fn clear_objects(&mut self) {
        self.objects.clear();
    }

    // Param is passed by value, moved
    pub fn set_objects(&mut self, v: ::protobuf::RepeatedField<ApbReadObjectResp>) {
        self.objects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_objects(&mut self) -> &mut ::protobuf::RepeatedField<ApbReadObjectResp> {
        &mut self.objects
    }

    // Take field
    pub fn take_objects(&mut self) -> ::protobuf::RepeatedField<ApbReadObjectResp> {
        ::std::mem::replace(&mut self.objects, ::protobuf::RepeatedField::new())
    }

    // optional uint32 errorcode = 3;


    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbReadObjectsResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        for v in &self.objects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.objects)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        for value in &self.objects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        for v in &self.objects {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.errorcode {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbReadObjectsResp {
        ApbReadObjectsResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ApbReadObjectsResp| { &m.success },
                |m: &mut ApbReadObjectsResp| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbReadObjectResp>>(
                "objects",
                |m: &ApbReadObjectsResp| { &m.objects },
                |m: &mut ApbReadObjectsResp| { &mut m.objects },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errorcode",
                |m: &ApbReadObjectsResp| { &m.errorcode },
                |m: &mut ApbReadObjectsResp| { &mut m.errorcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbReadObjectsResp>(
                "ApbReadObjectsResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbReadObjectsResp {
        static instance: ::protobuf::rt::LazyV2<ApbReadObjectsResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbReadObjectsResp::new)
    }
}

impl ::protobuf::Clear for ApbReadObjectsResp {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.objects.clear();
        self.errorcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbReadObjectsResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbReadObjectsResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCommitResp {
    // message fields
    success: ::std::option::Option<bool>,
    commit_time: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbCommitResp {
    fn default() -> &'a ApbCommitResp {
        <ApbCommitResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbCommitResp {
    pub fn new() -> ApbCommitResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional bytes commit_time = 2;


    pub fn get_commit_time(&self) -> &[u8] {
        match self.commit_time.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_commit_time(&mut self) {
        self.commit_time.clear();
    }

    pub fn has_commit_time(&self) -> bool {
        self.commit_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit_time(&mut self, v: ::std::vec::Vec<u8>) {
        self.commit_time = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit_time(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commit_time.is_none() {
            self.commit_time.set_default();
        }
        self.commit_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit_time(&mut self) -> ::std::vec::Vec<u8> {
        self.commit_time.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 errorcode = 3;


    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbCommitResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.commit_time)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(ref v) = self.commit_time.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.commit_time.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCommitResp {
        ApbCommitResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ApbCommitResp| { &m.success },
                |m: &mut ApbCommitResp| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "commit_time",
                |m: &ApbCommitResp| { &m.commit_time },
                |m: &mut ApbCommitResp| { &mut m.commit_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errorcode",
                |m: &ApbCommitResp| { &m.errorcode },
                |m: &mut ApbCommitResp| { &mut m.errorcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbCommitResp>(
                "ApbCommitResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbCommitResp {
        static instance: ::protobuf::rt::LazyV2<ApbCommitResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbCommitResp::new)
    }
}

impl ::protobuf::Clear for ApbCommitResp {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.commit_time.clear();
        self.errorcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCommitResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCommitResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStaticReadObjectsResp {
    // message fields
    pub objects: ::protobuf::SingularPtrField<ApbReadObjectsResp>,
    pub committime: ::protobuf::SingularPtrField<ApbCommitResp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbStaticReadObjectsResp {
    fn default() -> &'a ApbStaticReadObjectsResp {
        <ApbStaticReadObjectsResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbStaticReadObjectsResp {
    pub fn new() -> ApbStaticReadObjectsResp {
        ::std::default::Default::default()
    }

    // required .ApbReadObjectsResp objects = 1;


    pub fn get_objects(&self) -> &ApbReadObjectsResp {
        self.objects.as_ref().unwrap_or_else(|| <ApbReadObjectsResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_objects(&mut self) {
        self.objects.clear();
    }

    pub fn has_objects(&self) -> bool {
        self.objects.is_some()
    }

    // Param is passed by value, moved
    pub fn set_objects(&mut self, v: ApbReadObjectsResp) {
        self.objects = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_objects(&mut self) -> &mut ApbReadObjectsResp {
        if self.objects.is_none() {
            self.objects.set_default();
        }
        self.objects.as_mut().unwrap()
    }

    // Take field
    pub fn take_objects(&mut self) -> ApbReadObjectsResp {
        self.objects.take().unwrap_or_else(|| ApbReadObjectsResp::new())
    }

    // required .ApbCommitResp committime = 2;


    pub fn get_committime(&self) -> &ApbCommitResp {
        self.committime.as_ref().unwrap_or_else(|| <ApbCommitResp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_committime(&mut self) {
        self.committime.clear();
    }

    pub fn has_committime(&self) -> bool {
        self.committime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_committime(&mut self, v: ApbCommitResp) {
        self.committime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_committime(&mut self) -> &mut ApbCommitResp {
        if self.committime.is_none() {
            self.committime.set_default();
        }
        self.committime.as_mut().unwrap()
    }

    // Take field
    pub fn take_committime(&mut self) -> ApbCommitResp {
        self.committime.take().unwrap_or_else(|| ApbCommitResp::new())
    }
}

impl ::protobuf::Message for ApbStaticReadObjectsResp {
    fn is_initialized(&self) -> bool {
        if self.objects.is_none() {
            return false;
        }
        if self.committime.is_none() {
            return false;
        }
        for v in &self.objects {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.committime {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.objects)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.committime)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.objects.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.committime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.objects.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.committime.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStaticReadObjectsResp {
        ApbStaticReadObjectsResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbReadObjectsResp>>(
                "objects",
                |m: &ApbStaticReadObjectsResp| { &m.objects },
                |m: &mut ApbStaticReadObjectsResp| { &mut m.objects },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbCommitResp>>(
                "committime",
                |m: &ApbStaticReadObjectsResp| { &m.committime },
                |m: &mut ApbStaticReadObjectsResp| { &mut m.committime },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbStaticReadObjectsResp>(
                "ApbStaticReadObjectsResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbStaticReadObjectsResp {
        static instance: ::protobuf::rt::LazyV2<ApbStaticReadObjectsResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbStaticReadObjectsResp::new)
    }
}

impl ::protobuf::Clear for ApbStaticReadObjectsResp {
    fn clear(&mut self) {
        self.objects.clear();
        self.committime.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStaticReadObjectsResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStaticReadObjectsResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCreateDC {
    // message fields
    pub nodes: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbCreateDC {
    fn default() -> &'a ApbCreateDC {
        <ApbCreateDC as ::protobuf::Message>::default_instance()
    }
}

impl ApbCreateDC {
    pub fn new() -> ApbCreateDC {
        ::std::default::Default::default()
    }

    // repeated string nodes = 1;


    pub fn get_nodes(&self) -> &[::std::string::String] {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbCreateDC {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCreateDC {
        ApbCreateDC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nodes",
                |m: &ApbCreateDC| { &m.nodes },
                |m: &mut ApbCreateDC| { &mut m.nodes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbCreateDC>(
                "ApbCreateDC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbCreateDC {
        static instance: ::protobuf::rt::LazyV2<ApbCreateDC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbCreateDC::new)
    }
}

impl ::protobuf::Clear for ApbCreateDC {
    fn clear(&mut self) {
        self.nodes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCreateDC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCreateDC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCreateDCResp {
    // message fields
    success: ::std::option::Option<bool>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbCreateDCResp {
    fn default() -> &'a ApbCreateDCResp {
        <ApbCreateDCResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbCreateDCResp {
    pub fn new() -> ApbCreateDCResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional uint32 errorcode = 2;


    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbCreateDCResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCreateDCResp {
        ApbCreateDCResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ApbCreateDCResp| { &m.success },
                |m: &mut ApbCreateDCResp| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errorcode",
                |m: &ApbCreateDCResp| { &m.errorcode },
                |m: &mut ApbCreateDCResp| { &mut m.errorcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbCreateDCResp>(
                "ApbCreateDCResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbCreateDCResp {
        static instance: ::protobuf::rt::LazyV2<ApbCreateDCResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbCreateDCResp::new)
    }
}

impl ::protobuf::Clear for ApbCreateDCResp {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.errorcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCreateDCResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCreateDCResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetConnectionDescriptor {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetConnectionDescriptor {
    fn default() -> &'a ApbGetConnectionDescriptor {
        <ApbGetConnectionDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetConnectionDescriptor {
    pub fn new() -> ApbGetConnectionDescriptor {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ApbGetConnectionDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetConnectionDescriptor {
        ApbGetConnectionDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetConnectionDescriptor>(
                "ApbGetConnectionDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetConnectionDescriptor {
        static instance: ::protobuf::rt::LazyV2<ApbGetConnectionDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetConnectionDescriptor::new)
    }
}

impl ::protobuf::Clear for ApbGetConnectionDescriptor {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetConnectionDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetConnectionDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetConnectionDescriptorResp {
    // message fields
    success: ::std::option::Option<bool>,
    d: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbGetConnectionDescriptorResp {
    fn default() -> &'a ApbGetConnectionDescriptorResp {
        <ApbGetConnectionDescriptorResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbGetConnectionDescriptorResp {
    pub fn new() -> ApbGetConnectionDescriptorResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional bytes d = 2;


    pub fn get_d(&self) -> &[u8] {
        match self.d.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_d(&mut self) {
        self.d.clear();
    }

    pub fn has_d(&self) -> bool {
        self.d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: ::std::vec::Vec<u8>) {
        self.d = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_d(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.d.is_none() {
            self.d.set_default();
        }
        self.d.as_mut().unwrap()
    }

    // Take field
    pub fn take_d(&mut self) -> ::std::vec::Vec<u8> {
        self.d.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 errorcode = 3;


    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbGetConnectionDescriptorResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.d)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(ref v) = self.d.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.d.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetConnectionDescriptorResp {
        ApbGetConnectionDescriptorResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ApbGetConnectionDescriptorResp| { &m.success },
                |m: &mut ApbGetConnectionDescriptorResp| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "d",
                |m: &ApbGetConnectionDescriptorResp| { &m.d },
                |m: &mut ApbGetConnectionDescriptorResp| { &mut m.d },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errorcode",
                |m: &ApbGetConnectionDescriptorResp| { &m.errorcode },
                |m: &mut ApbGetConnectionDescriptorResp| { &mut m.errorcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbGetConnectionDescriptorResp>(
                "ApbGetConnectionDescriptorResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbGetConnectionDescriptorResp {
        static instance: ::protobuf::rt::LazyV2<ApbGetConnectionDescriptorResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbGetConnectionDescriptorResp::new)
    }
}

impl ::protobuf::Clear for ApbGetConnectionDescriptorResp {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.d.clear();
        self.errorcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetConnectionDescriptorResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetConnectionDescriptorResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbConnectToDCs {
    // message fields
    pub descriptors: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbConnectToDCs {
    fn default() -> &'a ApbConnectToDCs {
        <ApbConnectToDCs as ::protobuf::Message>::default_instance()
    }
}

impl ApbConnectToDCs {
    pub fn new() -> ApbConnectToDCs {
        ::std::default::Default::default()
    }

    // repeated bytes descriptors = 1;


    pub fn get_descriptors(&self) -> &[::std::vec::Vec<u8>] {
        &self.descriptors
    }
    pub fn clear_descriptors(&mut self) {
        self.descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_descriptors(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.descriptors
    }

    // Take field
    pub fn take_descriptors(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.descriptors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApbConnectToDCs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.descriptors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.descriptors {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.descriptors {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbConnectToDCs {
        ApbConnectToDCs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "descriptors",
                |m: &ApbConnectToDCs| { &m.descriptors },
                |m: &mut ApbConnectToDCs| { &mut m.descriptors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbConnectToDCs>(
                "ApbConnectToDCs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbConnectToDCs {
        static instance: ::protobuf::rt::LazyV2<ApbConnectToDCs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbConnectToDCs::new)
    }
}

impl ::protobuf::Clear for ApbConnectToDCs {
    fn clear(&mut self) {
        self.descriptors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbConnectToDCs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbConnectToDCs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbConnectToDCsResp {
    // message fields
    success: ::std::option::Option<bool>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApbConnectToDCsResp {
    fn default() -> &'a ApbConnectToDCsResp {
        <ApbConnectToDCsResp as ::protobuf::Message>::default_instance()
    }
}

impl ApbConnectToDCsResp {
    pub fn new() -> ApbConnectToDCsResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }
    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional uint32 errorcode = 2;


    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApbConnectToDCsResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbConnectToDCsResp {
        ApbConnectToDCsResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ApbConnectToDCsResp| { &m.success },
                |m: &mut ApbConnectToDCsResp| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "errorcode",
                |m: &ApbConnectToDCsResp| { &m.errorcode },
                |m: &mut ApbConnectToDCsResp| { &mut m.errorcode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApbConnectToDCsResp>(
                "ApbConnectToDCsResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApbConnectToDCsResp {
        static instance: ::protobuf::rt::LazyV2<ApbConnectToDCsResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApbConnectToDCsResp::new)
    }
}

impl ::protobuf::Clear for ApbConnectToDCsResp {
    fn clear(&mut self) {
        self.success = ::std::option::Option::None;
        self.errorcode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbConnectToDCsResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbConnectToDCsResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CRDT_type {
    COUNTER = 3,
    ORSET = 4,
    LWWREG = 5,
    MVREG = 6,
    GMAP = 8,
    RWSET = 10,
    RRMAP = 11,
    FATCOUNTER = 12,
    FLAG_EW = 13,
    FLAG_DW = 14,
    BCOUNTER = 15,
}

impl ::protobuf::ProtobufEnum for CRDT_type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CRDT_type> {
        match value {
            3 => ::std::option::Option::Some(CRDT_type::COUNTER),
            4 => ::std::option::Option::Some(CRDT_type::ORSET),
            5 => ::std::option::Option::Some(CRDT_type::LWWREG),
            6 => ::std::option::Option::Some(CRDT_type::MVREG),
            8 => ::std::option::Option::Some(CRDT_type::GMAP),
            10 => ::std::option::Option::Some(CRDT_type::RWSET),
            11 => ::std::option::Option::Some(CRDT_type::RRMAP),
            12 => ::std::option::Option::Some(CRDT_type::FATCOUNTER),
            13 => ::std::option::Option::Some(CRDT_type::FLAG_EW),
            14 => ::std::option::Option::Some(CRDT_type::FLAG_DW),
            15 => ::std::option::Option::Some(CRDT_type::BCOUNTER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CRDT_type] = &[
            CRDT_type::COUNTER,
            CRDT_type::ORSET,
            CRDT_type::LWWREG,
            CRDT_type::MVREG,
            CRDT_type::GMAP,
            CRDT_type::RWSET,
            CRDT_type::RRMAP,
            CRDT_type::FATCOUNTER,
            CRDT_type::FLAG_EW,
            CRDT_type::FLAG_DW,
            CRDT_type::BCOUNTER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CRDT_type>("CRDT_type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CRDT_type {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for CRDT_type {
    fn default() -> Self {
        CRDT_type::COUNTER
    }
}

impl ::protobuf::reflect::ProtobufValue for CRDT_type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18protos/antidote_pb.proto\"@\n\x0cApbErrorResp\x12\x16\n\x06errmsg\
    \x18\x01\x20\x02(\x0cR\x06errmsg\x12\x18\n\x07errcode\x18\x02\x20\x02(\r\
    R\x07errcode\"$\n\x10ApbCounterUpdate\x12\x10\n\x03inc\x18\x01\x20\x01(\
    \x12R\x03inc\")\n\x11ApbGetCounterResp\x12\x14\n\x05value\x18\x01\x20\
    \x02(\x11R\x05value\"\x89\x01\n\x0cApbSetUpdate\x12/\n\x06optype\x18\x01\
    \x20\x02(\x0e2\x17.ApbSetUpdate.SetOpTypeR\x06optype\x12\x12\n\x04adds\
    \x18\x02\x20\x03(\x0cR\x04adds\x12\x12\n\x04rems\x18\x03\x20\x03(\x0cR\
    \x04rems\"\x20\n\tSetOpType\x12\x07\n\x03ADD\x10\x01\x12\n\n\x06REMOVE\
    \x10\x02\"%\n\rApbGetSetResp\x12\x14\n\x05value\x18\x01\x20\x03(\x0cR\
    \x05value\"$\n\x0cApbRegUpdate\x12\x14\n\x05value\x18\x01\x20\x02(\x0cR\
    \x05value\"%\n\rApbGetRegResp\x12\x14\n\x05value\x18\x01\x20\x02(\x0cR\
    \x05value\")\n\x0fApbGetMVRegResp\x12\x16\n\x06values\x18\x01\x20\x03(\
    \x0cR\x06values\"=\n\tApbMapKey\x12\x10\n\x03key\x18\x01\x20\x02(\x0cR\
    \x03key\x12\x1e\n\x04type\x18\x02\x20\x02(\x0e2\n.CRDT_typeR\x04type\"k\
    \n\x0cApbMapUpdate\x12-\n\x07updates\x18\x01\x20\x03(\x0b2\x13.ApbMapNes\
    tedUpdateR\x07updates\x12,\n\x0bremovedKeys\x18\x02\x20\x03(\x0b2\n.ApbM\
    apKeyR\x0bremovedKeys\"_\n\x12ApbMapNestedUpdate\x12\x1c\n\x03key\x18\
    \x01\x20\x02(\x0b2\n.ApbMapKeyR\x03key\x12+\n\x06update\x18\x02\x20\x02(\
    \x0b2\x13.ApbUpdateOperationR\x06update\"7\n\rApbGetMapResp\x12&\n\x07en\
    tries\x18\x01\x20\x03(\x0b2\x0c.ApbMapEntryR\x07entries\"U\n\x0bApbMapEn\
    try\x12\x1c\n\x03key\x18\x01\x20\x02(\x0b2\n.ApbMapKeyR\x03key\x12(\n\
    \x05value\x18\x02\x20\x02(\x0b2\x12.ApbReadObjectRespR\x05value\"%\n\rAp\
    bFlagUpdate\x12\x14\n\x05value\x18\x01\x20\x02(\x08R\x05value\"&\n\x0eAp\
    bGetFlagResp\x12\x14\n\x05value\x18\x01\x20\x02(\x08R\x05value\"\x0e\n\
    \x0cApbCrdtReset\"J\n\x10ApbOperationResp\x12\x18\n\x07success\x18\x01\
    \x20\x02(\x08R\x07success\x12\x1c\n\terrorcode\x18\x02\x20\x01(\rR\terro\
    rcode\"\x98\x01\n\x10ApbTxnProperties\x12\x1d\n\nread_write\x18\x01\x20\
    \x01(\rR\treadWrite\x12\x19\n\x08red_blue\x18\x02\x20\x01(\rR\x07redBlue\
    \x12!\n\x0cshared_locks\x18\x03\x20\x03(\x0cR\x0bsharedLocks\x12'\n\x0fe\
    xclusive_locks\x18\x04\x20\x03(\x0cR\x0eexclusiveLocks\"Z\n\x0eApbBoundO\
    bject\x12\x10\n\x03key\x18\x01\x20\x02(\x0cR\x03key\x12\x1e\n\x04type\
    \x18\x02\x20\x02(\x0e2\n.CRDT_typeR\x04type\x12\x16\n\x06bucket\x18\x03\
    \x20\x02(\x0cR\x06bucket\"|\n\x0eApbReadObjects\x123\n\x0cboundobjects\
    \x18\x01\x20\x03(\x0b2\x0f.ApbBoundObjectR\x0cboundobjects\x125\n\x16tra\
    nsaction_descriptor\x18\x02\x20\x02(\x0cR\x15transactionDescriptor\"s\n\
    \x0bApbUpdateOp\x121\n\x0bboundobject\x18\x01\x20\x02(\x0b2\x0f.ApbBound\
    ObjectR\x0bboundobject\x121\n\toperation\x18\x02\x20\x02(\x0b2\x13.ApbUp\
    dateOperationR\toperation\"\x85\x02\n\x12ApbUpdateOperation\x12/\n\tcoun\
    terop\x18\x01\x20\x01(\x0b2\x11.ApbCounterUpdateR\tcounterop\x12#\n\x05s\
    etop\x18\x02\x20\x01(\x0b2\r.ApbSetUpdateR\x05setop\x12#\n\x05regop\x18\
    \x03\x20\x01(\x0b2\r.ApbRegUpdateR\x05regop\x12#\n\x05mapop\x18\x05\x20\
    \x01(\x0b2\r.ApbMapUpdateR\x05mapop\x12'\n\x07resetop\x18\x06\x20\x01(\
    \x0b2\r.ApbCrdtResetR\x07resetop\x12&\n\x06flagop\x18\x07\x20\x01(\x0b2\
    \x0e.ApbFlagUpdateR\x06flagop\"q\n\x10ApbUpdateObjects\x12&\n\x07updates\
    \x18\x01\x20\x03(\x0b2\x0c.ApbUpdateOpR\x07updates\x125\n\x16transaction\
    _descriptor\x18\x02\x20\x02(\x0cR\x15transactionDescriptor\"f\n\x13ApbSt\
    artTransaction\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\x0cR\ttimestamp\x12\
    1\n\nproperties\x18\x02\x20\x01(\x0b2\x11.ApbTxnPropertiesR\nproperties\
    \"L\n\x13ApbAbortTransaction\x125\n\x16transaction_descriptor\x18\x01\
    \x20\x02(\x0cR\x15transactionDescriptor\"M\n\x14ApbCommitTransaction\x12\
    5\n\x16transaction_descriptor\x18\x01\x20\x02(\x0cR\x15transactionDescri\
    ptor\"x\n\x16ApbStaticUpdateObjects\x126\n\x0btransaction\x18\x01\x20\
    \x02(\x0b2\x14.ApbStartTransactionR\x0btransaction\x12&\n\x07updates\x18\
    \x02\x20\x03(\x0b2\x0c.ApbUpdateOpR\x07updates\"y\n\x14ApbStaticReadObje\
    cts\x126\n\x0btransaction\x18\x01\x20\x02(\x0b2\x14.ApbStartTransactionR\
    \x0btransaction\x12)\n\x07objects\x18\x02\x20\x03(\x0b2\x0f.ApbBoundObje\
    ctR\x07objects\"\x88\x01\n\x17ApbStartTransactionResp\x12\x18\n\x07succe\
    ss\x18\x01\x20\x02(\x08R\x07success\x125\n\x16transaction_descriptor\x18\
    \x02\x20\x01(\x0cR\x15transactionDescriptor\x12\x1c\n\terrorcode\x18\x03\
    \x20\x01(\rR\terrorcode\"\xf4\x01\n\x11ApbReadObjectResp\x12,\n\x07count\
    er\x18\x01\x20\x01(\x0b2\x12.ApbGetCounterRespR\x07counter\x12\x20\n\x03\
    set\x18\x02\x20\x01(\x0b2\x0e.ApbGetSetRespR\x03set\x12\x20\n\x03reg\x18\
    \x03\x20\x01(\x0b2\x0e.ApbGetRegRespR\x03reg\x12&\n\x05mvreg\x18\x04\x20\
    \x01(\x0b2\x10.ApbGetMVRegRespR\x05mvreg\x12\x20\n\x03map\x18\x06\x20\
    \x01(\x0b2\x0e.ApbGetMapRespR\x03map\x12#\n\x04flag\x18\x07\x20\x01(\x0b\
    2\x0f.ApbGetFlagRespR\x04flag\"z\n\x12ApbReadObjectsResp\x12\x18\n\x07su\
    ccess\x18\x01\x20\x02(\x08R\x07success\x12,\n\x07objects\x18\x02\x20\x03\
    (\x0b2\x12.ApbReadObjectRespR\x07objects\x12\x1c\n\terrorcode\x18\x03\
    \x20\x01(\rR\terrorcode\"h\n\rApbCommitResp\x12\x18\n\x07success\x18\x01\
    \x20\x02(\x08R\x07success\x12\x1f\n\x0bcommit_time\x18\x02\x20\x01(\x0cR\
    \ncommitTime\x12\x1c\n\terrorcode\x18\x03\x20\x01(\rR\terrorcode\"y\n\
    \x18ApbStaticReadObjectsResp\x12-\n\x07objects\x18\x01\x20\x02(\x0b2\x13\
    .ApbReadObjectsRespR\x07objects\x12.\n\ncommittime\x18\x02\x20\x02(\x0b2\
    \x0e.ApbCommitRespR\ncommittime\"#\n\x0bApbCreateDC\x12\x14\n\x05nodes\
    \x18\x01\x20\x03(\tR\x05nodes\"I\n\x0fApbCreateDCResp\x12\x18\n\x07succe\
    ss\x18\x01\x20\x02(\x08R\x07success\x12\x1c\n\terrorcode\x18\x02\x20\x01\
    (\rR\terrorcode\"\x1c\n\x1aApbGetConnectionDescriptor\"f\n\x1eApbGetConn\
    ectionDescriptorResp\x12\x18\n\x07success\x18\x01\x20\x02(\x08R\x07succe\
    ss\x12\x0c\n\x01d\x18\x02\x20\x01(\x0cR\x01d\x12\x1c\n\terrorcode\x18\
    \x03\x20\x01(\rR\terrorcode\"3\n\x0fApbConnectToDCs\x12\x20\n\x0bdescrip\
    tors\x18\x01\x20\x03(\x0cR\x0bdescriptors\"M\n\x13ApbConnectToDCsResp\
    \x12\x18\n\x07success\x18\x01\x20\x02(\x08R\x07success\x12\x1c\n\terrorc\
    ode\x18\x02\x20\x01(\rR\terrorcode*\x92\x01\n\tCRDT_type\x12\x0b\n\x07CO\
    UNTER\x10\x03\x12\t\n\x05ORSET\x10\x04\x12\n\n\x06LWWREG\x10\x05\x12\t\n\
    \x05MVREG\x10\x06\x12\x08\n\x04GMAP\x10\x08\x12\t\n\x05RWSET\x10\n\x12\t\
    \n\x05RRMAP\x10\x0b\x12\x0e\n\nFATCOUNTER\x10\x0c\x12\x0b\n\x07FLAG_EW\
    \x10\r\x12\x0b\n\x07FLAG_DW\x10\x0e\x12\x0c\n\x08BCOUNTER\x10\x0fB&\n\
    \x18eu.antidotedb.antidotepbB\nAntidotePBJ\x96E\n\x07\x12\x05\0\0\x94\
    \x02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x03\01\
    \n$\n\x02\x08\x01\x12\x03\x03\01\x1a\x19\x20Java\x20package\x20specifier\
    s\n\n\x08\n\x01\x08\x12\x03\x04\0+\n\t\n\x02\x08\x08\x12\x03\x04\0+\n\n\
    \n\x02\x05\0\x12\x04\x07\0\x13\x01\n\n\n\x03\x05\0\x01\x12\x03\x07\x05\
    \x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x04\x10\n\x0c\n\x05\x05\0\x02\0\
    \x01\x12\x03\x08\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08\x0e\x0f\
    \n\x0b\n\x04\x05\0\x02\x01\x12\x03\t\x04\x0e\n\x0c\n\x05\x05\0\x02\x01\
    \x01\x12\x03\t\x04\t\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t\x0c\r\n\x0b\
    \n\x04\x05\0\x02\x02\x12\x03\n\x04\x0f\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\n\x04\n\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n\r\x0e\n\x0b\n\x04\
    \x05\0\x02\x03\x12\x03\x0b\x04\x0e\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\
    \x0b\x04\t\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x0b\x0c\r\n\x0b\n\x04\
    \x05\0\x02\x04\x12\x03\x0c\x04\r\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\
    \x0c\x04\x08\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0c\x0b\x0c\n\x0b\n\
    \x04\x05\0\x02\x05\x12\x03\r\x04\x0f\n\x0c\n\x05\x05\0\x02\x05\x01\x12\
    \x03\r\x04\t\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\r\x0c\x0e\n\x0b\n\x04\
    \x05\0\x02\x06\x12\x03\x0e\x04\x0f\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\
    \x0e\x04\t\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\x0e\x0c\x0e\n\x0b\n\x04\
    \x05\0\x02\x07\x12\x03\x0f\x04\x14\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\
    \x0f\x04\x0e\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0f\x11\x13\n\x0b\n\
    \x04\x05\0\x02\x08\x12\x03\x10\x04\x11\n\x0c\n\x05\x05\0\x02\x08\x01\x12\
    \x03\x10\x04\x0b\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x10\x0e\x10\n\x0b\
    \n\x04\x05\0\x02\t\x12\x03\x11\x04\x11\n\x0c\n\x05\x05\0\x02\t\x01\x12\
    \x03\x11\x04\x0b\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03\x11\x0e\x10\n\x0b\n\
    \x04\x05\0\x02\n\x12\x03\x12\x04\x12\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\
    \x12\x04\x0c\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\x12\x0f\x11\n!\n\x02\
    \x04\0\x12\x04\x16\0\x19\x01\x1a\x15\x20Riak\x20Error\x20response\n\n\n\
    \n\x03\x04\0\x01\x12\x03\x16\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\
    \x04\x1e\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x17\x04\x0c\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x17\r\x12\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x17\
    \x13\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17\x1c\x1d\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x18\x04\x20\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x18\
    \x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x18\r\x13\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x18\x14\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x18\x1e\x1f\nE\n\x02\x04\x01\x12\x04\x1f\0\"\x01\x1a\x1b\x20Counter\x20\
    increment\x20request\n2\x1c------------------\n\x20Counter\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x1f\x08\x18\n\x9f\x01\n\x04\x04\x01\x02\0\x12\x03!\
    \x04\x1c\x1a\x91\x01\x20inc\x20indicates\x20the\x20value\x20to\x20be\x20\
    incremented.\x20To\x20decrement,\x20use\x20a\x20negative\x20value.\x20If\
    \x20no\x20value\x20is\x20given,\x20it\x20will\x20be\x20considered\x20as\
    \x20an\x20increment\x20by\x201\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03!\
    \x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03!\r\x13\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03!\x14\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03!\
    \x1a\x1b\n\x20\n\x02\x04\x02\x12\x04%\0'\x01\x1a\x14\x20Response\x20oper\
    ation\n\n\n\n\x03\x04\x02\x01\x12\x03%\x08\x19\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03&\x04\x1e\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03&\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03&\r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03&\x14\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03&\x1c\x1d\n;\n\x02\
    \x04\x03\x12\x04.\07\x01\x1a\x15\x20Set\x20updates\x20request\n2\x18----\
    --------------\n\x20Set\n\n\n\n\x03\x04\x03\x01\x12\x03.\x08\x14\n\x0c\n\
    \x04\x04\x03\x04\0\x12\x04/\x043\x05\n\x0c\n\x05\x04\x03\x04\0\x01\x12\
    \x03/\t\x12\n\r\n\x06\x04\x03\x04\0\x02\0\x12\x031\x08\x10\n\x0e\n\x07\
    \x04\x03\x04\0\x02\0\x01\x12\x031\x08\x0b\n\x0e\n\x07\x04\x03\x04\0\x02\
    \0\x02\x12\x031\x0e\x0f\n\r\n\x06\x04\x03\x04\0\x02\x01\x12\x032\x08\x13\
    \n\x0e\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x032\x08\x0e\n\x0e\n\x07\x04\
    \x03\x04\0\x02\x01\x02\x12\x032\x11\x12\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x034\x04\"\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x034\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\0\x06\x12\x034\r\x16\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x034\
    \x17\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x034\x20!\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x035\x04\x1c\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x035\x04\
    \x0c\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x035\r\x12\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x035\x13\x17\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x035\
    \x1a\x1b\n\x0b\n\x04\x04\x03\x02\x02\x12\x036\x04\x1c\n\x0c\n\x05\x04\
    \x03\x02\x02\x04\x12\x036\x04\x0c\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\
    \x036\r\x12\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x036\x13\x17\n\x0c\n\x05\
    \x04\x03\x02\x02\x03\x12\x036\x1a\x1b\n\x1d\n\x02\x04\x04\x12\x04:\0<\
    \x01\x1a\x11\x20Get\x20set\x20request\n\n\n\n\x03\x04\x04\x01\x12\x03:\
    \x08\x15\n\x0b\n\x04\x04\x04\x02\0\x12\x03;\x04\x1d\n\x0c\n\x05\x04\x04\
    \x02\0\x04\x12\x03;\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03;\r\x12\
    \n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03;\x13\x18\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03;\x1b\x1c\n@\n\x02\x04\x05\x12\x04B\0D\x01\x1a\x11\x20Regi\
    ster\x20update\n2!------------------\n\x20LWW-register\n\n\n\n\x03\x04\
    \x05\x01\x12\x03B\x08\x14\n\x0b\n\x04\x04\x05\x02\0\x12\x03C\x04\x1d\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03C\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03C\r\x12\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03C\x13\x18\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03C\x1b\x1c\n\x20\n\x02\x04\x06\x12\x04G\0\
    I\x01\x1a\x14\x20Response\x20operation\n\n\n\n\x03\x04\x06\x01\x12\x03G\
    \x08\x15\n\x0b\n\x04\x04\x06\x02\0\x12\x03H\x04\x1d\n\x0c\n\x05\x04\x06\
    \x02\0\x04\x12\x03H\x04\x0c\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03H\r\x12\
    \n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03H\x13\x18\n\x0c\n\x05\x04\x06\x02\
    \0\x03\x12\x03H\x1b\x1c\nY\n\x02\x04\x07\x12\x04Q\0S\x01\x1a\x0b\x20resp\
    onse:\n2\x20------------------\n\x20MV-register\n2\x1e\x20use\x20ApbRegU\
    pdate\x20for\x20updates\n\n\n\n\x03\x04\x07\x01\x12\x03Q\x08\x17\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x03R\x04\x1e\n\x0c\n\x05\x04\x07\x02\0\x04\x12\
    \x03R\x04\x0c\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03R\r\x12\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03R\x13\x19\n\x0c\n\x05\x04\x07\x02\0\x03\x12\
    \x03R\x1c\x1d\n$\n\x02\x04\x08\x12\x04Y\0\\\x012\x18------------------\n\
    \x20Map\n\n\n\n\x03\x04\x08\x01\x12\x03Y\x08\x11\n\x0b\n\x04\x04\x08\x02\
    \0\x12\x03Z\x04\x1b\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03Z\x04\x0c\n\x0c\
    \n\x05\x04\x08\x02\0\x05\x12\x03Z\r\x12\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x03Z\x13\x16\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03Z\x19\x1a\n\x0b\n\
    \x04\x04\x08\x02\x01\x12\x03[\x04\x20\n\x0c\n\x05\x04\x08\x02\x01\x04\
    \x12\x03[\x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03[\r\x16\n\x0c\n\
    \x05\x04\x08\x02\x01\x01\x12\x03[\x17\x1b\n\x0c\n\x05\x04\x08\x02\x01\
    \x03\x12\x03[\x1e\x1f\n\n\n\x02\x04\t\x12\x04^\0a\x01\n\n\n\x03\x04\t\
    \x01\x12\x03^\x08\x14\n\x0b\n\x04\x04\t\x02\0\x12\x03_\x04,\n\x0c\n\x05\
    \x04\t\x02\0\x04\x12\x03_\x04\x0c\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03_\r\
    \x1f\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03_\x20'\n\x0c\n\x05\x04\t\x02\0\
    \x03\x12\x03_*+\n\x0b\n\x04\x04\t\x02\x01\x12\x03`\x04'\n\x0c\n\x05\x04\
    \t\x02\x01\x04\x12\x03`\x04\x0c\n\x0c\n\x05\x04\t\x02\x01\x06\x12\x03`\r\
    \x16\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03`\x17\"\n\x0c\n\x05\x04\t\x02\
    \x01\x03\x12\x03`%&\n\n\n\x02\x04\n\x12\x04c\0f\x01\n\n\n\x03\x04\n\x01\
    \x12\x03c\x08\x1a\n\x0b\n\x04\x04\n\x02\0\x12\x03d\x04\x1f\n\x0c\n\x05\
    \x04\n\x02\0\x04\x12\x03d\x04\x0c\n\x0c\n\x05\x04\n\x02\0\x06\x12\x03d\r\
    \x16\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03d\x17\x1a\n\x0c\n\x05\x04\n\x02\
    \0\x03\x12\x03d\x1d\x1e\n\x0b\n\x04\x04\n\x02\x01\x12\x03e\x04+\n\x0c\n\
    \x05\x04\n\x02\x01\x04\x12\x03e\x04\x0c\n\x0c\n\x05\x04\n\x02\x01\x06\
    \x12\x03e\r\x1f\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03e\x20&\n\x0c\n\x05\
    \x04\n\x02\x01\x03\x12\x03e)*\n\n\n\x02\x04\x0b\x12\x04h\0j\x01\n\n\n\
    \x03\x04\x0b\x01\x12\x03h\x08\x15\n\x0b\n\x04\x04\x0b\x02\0\x12\x03i\x04\
    %\n\x0c\n\x05\x04\x0b\x02\0\x04\x12\x03i\x04\x0c\n\x0c\n\x05\x04\x0b\x02\
    \0\x06\x12\x03i\r\x18\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03i\x19\x20\n\
    \x0c\n\x05\x04\x0b\x02\0\x03\x12\x03i#$\n\n\n\x02\x04\x0c\x12\x04l\0o\
    \x01\n\n\n\x03\x04\x0c\x01\x12\x03l\x08\x13\n\x0b\n\x04\x04\x0c\x02\0\
    \x12\x03m\x04\x1f\n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03m\x04\x0c\n\x0c\n\
    \x05\x04\x0c\x02\0\x06\x12\x03m\r\x16\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\
    \x03m\x17\x1a\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03m\x1d\x1e\n\x0b\n\x04\
    \x04\x0c\x02\x01\x12\x03n\x04)\n\x0c\n\x05\x04\x0c\x02\x01\x04\x12\x03n\
    \x04\x0c\n\x0c\n\x05\x04\x0c\x02\x01\x06\x12\x03n\r\x1e\n\x0c\n\x05\x04\
    \x0c\x02\x01\x01\x12\x03n\x1f$\n\x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03n'\
    (\n'\n\x02\x04\r\x12\x04t\0v\x012\x1b-------------------\n\x20Flags\n\n\
    \n\n\x03\x04\r\x01\x12\x03t\x08\x15\n\x0b\n\x04\x04\r\x02\0\x12\x03u\x04\
    \x1c\n\x0c\n\x05\x04\r\x02\0\x04\x12\x03u\x04\x0c\n\x0c\n\x05\x04\r\x02\
    \0\x05\x12\x03u\r\x11\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03u\x12\x17\n\x0c\
    \n\x05\x04\r\x02\0\x03\x12\x03u\x1a\x1b\n\n\n\x02\x04\x0e\x12\x04x\0z\
    \x01\n\n\n\x03\x04\x0e\x01\x12\x03x\x08\x16\n\x0b\n\x04\x04\x0e\x02\0\
    \x12\x03y\x04\x1c\n\x0c\n\x05\x04\x0e\x02\0\x04\x12\x03y\x04\x0c\n\x0c\n\
    \x05\x04\x0e\x02\0\x05\x12\x03y\r\x11\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\
    \x03y\x12\x17\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03y\x1a\x1b\n%\n\x02\
    \x04\x0f\x12\x04}\0\x7f\x01\x1a\x19\x20General\x20reset\x20operation\n\n\
    \n\n\x03\x04\x0f\x01\x12\x03}\x08\x14\n\"\n\x02\x04\x10\x12\x06\x82\x01\
    \0\x85\x01\x01\x1a\x14\x20Response\x20operation\n\n\x0b\n\x03\x04\x10\
    \x01\x12\x04\x82\x01\x08\x18\n\x0c\n\x04\x04\x10\x02\0\x12\x04\x83\x01\
    \x04\x1e\n\r\n\x05\x04\x10\x02\0\x04\x12\x04\x83\x01\x04\x0c\n\r\n\x05\
    \x04\x10\x02\0\x05\x12\x04\x83\x01\r\x11\n\r\n\x05\x04\x10\x02\0\x01\x12\
    \x04\x83\x01\x12\x19\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\x83\x01\x1c\x1d\
    \n\x0c\n\x04\x04\x10\x02\x01\x12\x04\x84\x01\x04\"\n\r\n\x05\x04\x10\x02\
    \x01\x04\x12\x04\x84\x01\x04\x0c\n\r\n\x05\x04\x10\x02\x01\x05\x12\x04\
    \x84\x01\r\x13\n\r\n\x05\x04\x10\x02\x01\x01\x12\x04\x84\x01\x14\x1d\n\r\
    \n\x05\x04\x10\x02\x01\x03\x12\x04\x84\x01\x20!\nw\n\x02\x04\x11\x12\x06\
    \x8b\x01\0\x90\x01\x01\x1a(\x20Properties\x20parameters\x20of\x20a\x20tr\
    ansaction\n2?-----------------------------------------------------------\
    ---\n\n\x0b\n\x03\x04\x11\x01\x12\x04\x8b\x01\x08\x18\nF\n\x04\x04\x11\
    \x02\0\x12\x04\x8c\x01\x04$\"8default\x20=\x200\x20=\x20read_write,\x201\
    \x20=\x20read_only,\x202\x20=\x20write_only\n\n\r\n\x05\x04\x11\x02\0\
    \x04\x12\x04\x8c\x01\x04\x0c\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\x8c\x01\
    \r\x13\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\x8c\x01\x14\x1e\n\r\n\x05\x04\
    \x11\x02\0\x03\x12\x04\x8c\x01!\"\n+\n\x04\x04\x11\x02\x01\x12\x04\x8d\
    \x01\x04\"\"\x1d\x20default\x20=\x200\x20=\x20blue,\x201\x20=\x20red\n\n\
    \r\n\x05\x04\x11\x02\x01\x04\x12\x04\x8d\x01\x04\x0c\n\r\n\x05\x04\x11\
    \x02\x01\x05\x12\x04\x8d\x01\r\x13\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\
    \x8d\x01\x14\x1c\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\x8d\x01\x1f\x20\n\
    \x0c\n\x04\x04\x11\x02\x02\x12\x04\x8e\x01\x04$\n\r\n\x05\x04\x11\x02\
    \x02\x04\x12\x04\x8e\x01\x04\x0c\n\r\n\x05\x04\x11\x02\x02\x05\x12\x04\
    \x8e\x01\r\x12\n\r\n\x05\x04\x11\x02\x02\x01\x12\x04\x8e\x01\x13\x1f\n\r\
    \n\x05\x04\x11\x02\x02\x03\x12\x04\x8e\x01\"#\n\x0c\n\x04\x04\x11\x02\
    \x03\x12\x04\x8f\x01\x04'\n\r\n\x05\x04\x11\x02\x03\x04\x12\x04\x8f\x01\
    \x04\x0c\n\r\n\x05\x04\x11\x02\x03\x05\x12\x04\x8f\x01\r\x12\n\r\n\x05\
    \x04\x11\x02\x03\x01\x12\x04\x8f\x01\x13\"\n\r\n\x05\x04\x11\x02\x03\x03\
    \x12\x04\x8f\x01%&\n+\n\x02\x04\x12\x12\x06\x93\x01\0\x97\x01\x01\x1a\
    \x1d\x20Object\x20(Key)\x20representation\n\n\x0b\n\x03\x04\x12\x01\x12\
    \x04\x93\x01\x08\x16\n\x0c\n\x04\x04\x12\x02\0\x12\x04\x94\x01\x04\x1b\n\
    \r\n\x05\x04\x12\x02\0\x04\x12\x04\x94\x01\x04\x0c\n\r\n\x05\x04\x12\x02\
    \0\x05\x12\x04\x94\x01\r\x12\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x94\x01\
    \x13\x16\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\x94\x01\x19\x1a\n\x0c\n\x04\
    \x04\x12\x02\x01\x12\x04\x95\x01\x04\x20\n\r\n\x05\x04\x12\x02\x01\x04\
    \x12\x04\x95\x01\x04\x0c\n\r\n\x05\x04\x12\x02\x01\x06\x12\x04\x95\x01\r\
    \x16\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\x95\x01\x17\x1b\n\r\n\x05\x04\
    \x12\x02\x01\x03\x12\x04\x95\x01\x1e\x1f\n\x0c\n\x04\x04\x12\x02\x02\x12\
    \x04\x96\x01\x04\x1e\n\r\n\x05\x04\x12\x02\x02\x04\x12\x04\x96\x01\x04\
    \x0c\n\r\n\x05\x04\x12\x02\x02\x05\x12\x04\x96\x01\r\x12\n\r\n\x05\x04\
    \x12\x02\x02\x01\x12\x04\x96\x01\x13\x19\n\r\n\x05\x04\x12\x02\x02\x03\
    \x12\x04\x96\x01\x1c\x1d\n\"\n\x02\x04\x13\x12\x06\x9a\x01\0\x9d\x01\x01\
    \x1a\x14\x20Objects\x20to\x20be\x20read\n\n\x0b\n\x03\x04\x13\x01\x12\
    \x04\x9a\x01\x08\x16\n\x0c\n\x04\x04\x13\x02\0\x12\x04\x9b\x01\x04-\n\r\
    \n\x05\x04\x13\x02\0\x04\x12\x04\x9b\x01\x04\x0c\n\r\n\x05\x04\x13\x02\0\
    \x06\x12\x04\x9b\x01\r\x1b\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\x9b\x01\
    \x1c(\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\x9b\x01+,\n\x0c\n\x04\x04\x13\
    \x02\x01\x12\x04\x9c\x01\x04.\n\r\n\x05\x04\x13\x02\x01\x04\x12\x04\x9c\
    \x01\x04\x0c\n\r\n\x05\x04\x13\x02\x01\x05\x12\x04\x9c\x01\r\x12\n\r\n\
    \x05\x04\x13\x02\x01\x01\x12\x04\x9c\x01\x13)\n\r\n\x05\x04\x13\x02\x01\
    \x03\x12\x04\x9c\x01,-\n@\n\x02\x04\x14\x12\x06\xa0\x01\0\xa3\x01\x01\
    \x1a2\x20An\x20Object\x20to\x20be\x20updated\x20with\x20specified\x20ope\
    ration\n\n\x0b\n\x03\x04\x14\x01\x12\x04\xa0\x01\x08\x13\n\x0c\n\x04\x04\
    \x14\x02\0\x12\x04\xa1\x01\x04,\n\r\n\x05\x04\x14\x02\0\x04\x12\x04\xa1\
    \x01\x04\x0c\n\r\n\x05\x04\x14\x02\0\x06\x12\x04\xa1\x01\r\x1b\n\r\n\x05\
    \x04\x14\x02\0\x01\x12\x04\xa1\x01\x1c'\n\r\n\x05\x04\x14\x02\0\x03\x12\
    \x04\xa1\x01*+\n\x0c\n\x04\x04\x14\x02\x01\x12\x04\xa2\x01\x04.\n\r\n\
    \x05\x04\x14\x02\x01\x04\x12\x04\xa2\x01\x04\x0c\n\r\n\x05\x04\x14\x02\
    \x01\x06\x12\x04\xa2\x01\r\x1f\n\r\n\x05\x04\x14\x02\x01\x01\x12\x04\xa2\
    \x01\x20)\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\xa2\x01,-\n#\n\x02\x04\
    \x15\x12\x06\xa5\x01\0\xac\x01\x01\"\x15\x20TODO\x20use\x20this\x20above\
    \n\n\x0b\n\x03\x04\x15\x01\x12\x04\xa5\x01\x08\x1a\n\x0c\n\x04\x04\x15\
    \x02\0\x12\x04\xa6\x01\x04,\n\r\n\x05\x04\x15\x02\0\x04\x12\x04\xa6\x01\
    \x04\x0c\n\r\n\x05\x04\x15\x02\0\x06\x12\x04\xa6\x01\r\x1d\n\r\n\x05\x04\
    \x15\x02\0\x01\x12\x04\xa6\x01\x1e'\n\r\n\x05\x04\x15\x02\0\x03\x12\x04\
    \xa6\x01*+\n\x0c\n\x04\x04\x15\x02\x01\x12\x04\xa7\x01\x04$\n\r\n\x05\
    \x04\x15\x02\x01\x04\x12\x04\xa7\x01\x04\x0c\n\r\n\x05\x04\x15\x02\x01\
    \x06\x12\x04\xa7\x01\r\x19\n\r\n\x05\x04\x15\x02\x01\x01\x12\x04\xa7\x01\
    \x1a\x1f\n\r\n\x05\x04\x15\x02\x01\x03\x12\x04\xa7\x01\"#\n\x0c\n\x04\
    \x04\x15\x02\x02\x12\x04\xa8\x01\x04$\n\r\n\x05\x04\x15\x02\x02\x04\x12\
    \x04\xa8\x01\x04\x0c\n\r\n\x05\x04\x15\x02\x02\x06\x12\x04\xa8\x01\r\x19\
    \n\r\n\x05\x04\x15\x02\x02\x01\x12\x04\xa8\x01\x1a\x1f\n\r\n\x05\x04\x15\
    \x02\x02\x03\x12\x04\xa8\x01\"#\n\x0c\n\x04\x04\x15\x02\x03\x12\x04\xa9\
    \x01\x04$\n\r\n\x05\x04\x15\x02\x03\x04\x12\x04\xa9\x01\x04\x0c\n\r\n\
    \x05\x04\x15\x02\x03\x06\x12\x04\xa9\x01\r\x19\n\r\n\x05\x04\x15\x02\x03\
    \x01\x12\x04\xa9\x01\x1a\x1f\n\r\n\x05\x04\x15\x02\x03\x03\x12\x04\xa9\
    \x01\"#\n\x0c\n\x04\x04\x15\x02\x04\x12\x04\xaa\x01\x04&\n\r\n\x05\x04\
    \x15\x02\x04\x04\x12\x04\xaa\x01\x04\x0c\n\r\n\x05\x04\x15\x02\x04\x06\
    \x12\x04\xaa\x01\r\x19\n\r\n\x05\x04\x15\x02\x04\x01\x12\x04\xaa\x01\x1a\
    !\n\r\n\x05\x04\x15\x02\x04\x03\x12\x04\xaa\x01$%\n\x0c\n\x04\x04\x15\
    \x02\x05\x12\x04\xab\x01\x04&\n\r\n\x05\x04\x15\x02\x05\x04\x12\x04\xab\
    \x01\x04\x0c\n\r\n\x05\x04\x15\x02\x05\x06\x12\x04\xab\x01\r\x1a\n\r\n\
    \x05\x04\x15\x02\x05\x01\x12\x04\xab\x01\x1b!\n\r\n\x05\x04\x15\x02\x05\
    \x03\x12\x04\xab\x01$%\n%\n\x02\x04\x16\x12\x06\xaf\x01\0\xb2\x01\x01\
    \x1a\x17\x20Objects\x20to\x20be\x20updated\n\n\x0b\n\x03\x04\x16\x01\x12\
    \x04\xaf\x01\x08\x18\n\x0c\n\x04\x04\x16\x02\0\x12\x04\xb0\x01\x04%\n\r\
    \n\x05\x04\x16\x02\0\x04\x12\x04\xb0\x01\x04\x0c\n\r\n\x05\x04\x16\x02\0\
    \x06\x12\x04\xb0\x01\r\x18\n\r\n\x05\x04\x16\x02\0\x01\x12\x04\xb0\x01\
    \x19\x20\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\xb0\x01#$\n\x0c\n\x04\x04\
    \x16\x02\x01\x12\x04\xb1\x01\x04.\n\r\n\x05\x04\x16\x02\x01\x04\x12\x04\
    \xb1\x01\x04\x0c\n\r\n\x05\x04\x16\x02\x01\x05\x12\x04\xb1\x01\r\x12\n\r\
    \n\x05\x04\x16\x02\x01\x01\x12\x04\xb1\x01\x13)\n\r\n\x05\x04\x16\x02\
    \x01\x03\x12\x04\xb1\x01,-\n!\n\x02\x04\x17\x12\x06\xb5\x01\0\xb8\x01\
    \x01\x1a\x13\x20Start\x20Transaction\n\n\x0b\n\x03\x04\x17\x01\x12\x04\
    \xb5\x01\x08\x1b\n\x0c\n\x04\x04\x17\x02\0\x12\x04\xb6\x01\x04!\n\r\n\
    \x05\x04\x17\x02\0\x04\x12\x04\xb6\x01\x04\x0c\n\r\n\x05\x04\x17\x02\0\
    \x05\x12\x04\xb6\x01\r\x12\n\r\n\x05\x04\x17\x02\0\x01\x12\x04\xb6\x01\
    \x13\x1c\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\xb6\x01\x1f\x20\n\x0c\n\x04\
    \x04\x17\x02\x01\x12\x04\xb7\x01\x04-\n\r\n\x05\x04\x17\x02\x01\x04\x12\
    \x04\xb7\x01\x04\x0c\n\r\n\x05\x04\x17\x02\x01\x06\x12\x04\xb7\x01\r\x1d\
    \n\r\n\x05\x04\x17\x02\x01\x01\x12\x04\xb7\x01\x1e(\n\r\n\x05\x04\x17\
    \x02\x01\x03\x12\x04\xb7\x01+,\n!\n\x02\x04\x18\x12\x06\xbb\x01\0\xbd\
    \x01\x01\x1a\x13\x20Abort\x20Transaction\n\n\x0b\n\x03\x04\x18\x01\x12\
    \x04\xbb\x01\x08\x1b\n\x0c\n\x04\x04\x18\x02\0\x12\x04\xbc\x01\x04.\n\r\
    \n\x05\x04\x18\x02\0\x04\x12\x04\xbc\x01\x04\x0c\n\r\n\x05\x04\x18\x02\0\
    \x05\x12\x04\xbc\x01\r\x12\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\xbc\x01\
    \x13)\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\xbc\x01,-\n\"\n\x02\x04\x19\
    \x12\x06\xc0\x01\0\xc2\x01\x01\x1a\x14\x20Commit\x20Transaction\n\n\x0b\
    \n\x03\x04\x19\x01\x12\x04\xc0\x01\x08\x1c\n\x0c\n\x04\x04\x19\x02\0\x12\
    \x04\xc1\x01\x04.\n\r\n\x05\x04\x19\x02\0\x04\x12\x04\xc1\x01\x04\x0c\n\
    \r\n\x05\x04\x19\x02\0\x05\x12\x04\xc1\x01\r\x12\n\r\n\x05\x04\x19\x02\0\
    \x01\x12\x04\xc1\x01\x13)\n\r\n\x05\x04\x19\x02\0\x03\x12\x04\xc1\x01,-\
    \n\x0c\n\x02\x04\x1a\x12\x06\xc5\x01\0\xc8\x01\x01\n\x0b\n\x03\x04\x1a\
    \x01\x12\x04\xc5\x01\x08\x1e\n\x0c\n\x04\x04\x1a\x02\0\x12\x04\xc6\x01\
    \x041\n\r\n\x05\x04\x1a\x02\0\x04\x12\x04\xc6\x01\x04\x0c\n\r\n\x05\x04\
    \x1a\x02\0\x06\x12\x04\xc6\x01\r\x20\n\r\n\x05\x04\x1a\x02\0\x01\x12\x04\
    \xc6\x01!,\n\r\n\x05\x04\x1a\x02\0\x03\x12\x04\xc6\x01/0\n\x0c\n\x04\x04\
    \x1a\x02\x01\x12\x04\xc7\x01\x04%\n\r\n\x05\x04\x1a\x02\x01\x04\x12\x04\
    \xc7\x01\x04\x0c\n\r\n\x05\x04\x1a\x02\x01\x06\x12\x04\xc7\x01\r\x18\n\r\
    \n\x05\x04\x1a\x02\x01\x01\x12\x04\xc7\x01\x19\x20\n\r\n\x05\x04\x1a\x02\
    \x01\x03\x12\x04\xc7\x01#$\n\x0c\n\x02\x04\x1b\x12\x06\xca\x01\0\xcd\x01\
    \x01\n\x0b\n\x03\x04\x1b\x01\x12\x04\xca\x01\x08\x1c\n\x0c\n\x04\x04\x1b\
    \x02\0\x12\x04\xcb\x01\x041\n\r\n\x05\x04\x1b\x02\0\x04\x12\x04\xcb\x01\
    \x04\x0c\n\r\n\x05\x04\x1b\x02\0\x06\x12\x04\xcb\x01\r\x20\n\r\n\x05\x04\
    \x1b\x02\0\x01\x12\x04\xcb\x01!,\n\r\n\x05\x04\x1b\x02\0\x03\x12\x04\xcb\
    \x01/0\n\x0c\n\x04\x04\x1b\x02\x01\x12\x04\xcc\x01\x04(\n\r\n\x05\x04\
    \x1b\x02\x01\x04\x12\x04\xcc\x01\x04\x0c\n\r\n\x05\x04\x1b\x02\x01\x06\
    \x12\x04\xcc\x01\r\x1b\n\r\n\x05\x04\x1b\x02\x01\x01\x12\x04\xcc\x01\x1c\
    #\n\r\n\x05\x04\x1b\x02\x01\x03\x12\x04\xcc\x01&'\n)\n\x02\x04\x1c\x12\
    \x06\xd0\x01\0\xd4\x01\x01\x1a\x1bStart\x20transaction\x20response\n\n\
    \x0b\n\x03\x04\x1c\x01\x12\x04\xd0\x01\x08\x1f\n\x0c\n\x04\x04\x1c\x02\0\
    \x12\x04\xd1\x01\x04\x1e\n\r\n\x05\x04\x1c\x02\0\x04\x12\x04\xd1\x01\x04\
    \x0c\n\r\n\x05\x04\x1c\x02\0\x05\x12\x04\xd1\x01\r\x11\n\r\n\x05\x04\x1c\
    \x02\0\x01\x12\x04\xd1\x01\x12\x19\n\r\n\x05\x04\x1c\x02\0\x03\x12\x04\
    \xd1\x01\x1c\x1d\n\x0c\n\x04\x04\x1c\x02\x01\x12\x04\xd2\x01\x04.\n\r\n\
    \x05\x04\x1c\x02\x01\x04\x12\x04\xd2\x01\x04\x0c\n\r\n\x05\x04\x1c\x02\
    \x01\x05\x12\x04\xd2\x01\r\x12\n\r\n\x05\x04\x1c\x02\x01\x01\x12\x04\xd2\
    \x01\x13)\n\r\n\x05\x04\x1c\x02\x01\x03\x12\x04\xd2\x01,-\n\x0c\n\x04\
    \x04\x1c\x02\x02\x12\x04\xd3\x01\x04\"\n\r\n\x05\x04\x1c\x02\x02\x04\x12\
    \x04\xd3\x01\x04\x0c\n\r\n\x05\x04\x1c\x02\x02\x05\x12\x04\xd3\x01\r\x13\
    \n\r\n\x05\x04\x1c\x02\x02\x01\x12\x04\xd3\x01\x14\x1d\n\r\n\x05\x04\x1c\
    \x02\x02\x03\x12\x04\xd3\x01\x20!\n$\n\x02\x04\x1d\x12\x06\xd7\x01\0\xdf\
    \x01\x01\x1a\x16Read\x20Objects\x20Response\n\n\x0b\n\x03\x04\x1d\x01\
    \x12\x04\xd7\x01\x08\x19\n%\n\x04\x04\x1d\x02\0\x12\x04\xd9\x01\x04+\x1a\
    \x17\x20one\x20of\x20the\x20following:\n\n\r\n\x05\x04\x1d\x02\0\x04\x12\
    \x04\xd9\x01\x04\x0c\n\r\n\x05\x04\x1d\x02\0\x06\x12\x04\xd9\x01\r\x1e\n\
    \r\n\x05\x04\x1d\x02\0\x01\x12\x04\xd9\x01\x1f&\n\r\n\x05\x04\x1d\x02\0\
    \x03\x12\x04\xd9\x01)*\n\x0c\n\x04\x04\x1d\x02\x01\x12\x04\xda\x01\x04#\
    \n\r\n\x05\x04\x1d\x02\x01\x04\x12\x04\xda\x01\x04\x0c\n\r\n\x05\x04\x1d\
    \x02\x01\x06\x12\x04\xda\x01\r\x1a\n\r\n\x05\x04\x1d\x02\x01\x01\x12\x04\
    \xda\x01\x1b\x1e\n\r\n\x05\x04\x1d\x02\x01\x03\x12\x04\xda\x01!\"\n\x0c\
    \n\x04\x04\x1d\x02\x02\x12\x04\xdb\x01\x04#\n\r\n\x05\x04\x1d\x02\x02\
    \x04\x12\x04\xdb\x01\x04\x0c\n\r\n\x05\x04\x1d\x02\x02\x06\x12\x04\xdb\
    \x01\r\x1a\n\r\n\x05\x04\x1d\x02\x02\x01\x12\x04\xdb\x01\x1b\x1e\n\r\n\
    \x05\x04\x1d\x02\x02\x03\x12\x04\xdb\x01!\"\n\x0c\n\x04\x04\x1d\x02\x03\
    \x12\x04\xdc\x01\x04'\n\r\n\x05\x04\x1d\x02\x03\x04\x12\x04\xdc\x01\x04\
    \x0c\n\r\n\x05\x04\x1d\x02\x03\x06\x12\x04\xdc\x01\r\x1c\n\r\n\x05\x04\
    \x1d\x02\x03\x01\x12\x04\xdc\x01\x1d\"\n\r\n\x05\x04\x1d\x02\x03\x03\x12\
    \x04\xdc\x01%&\n\x0c\n\x04\x04\x1d\x02\x04\x12\x04\xdd\x01\x04#\n\r\n\
    \x05\x04\x1d\x02\x04\x04\x12\x04\xdd\x01\x04\x0c\n\r\n\x05\x04\x1d\x02\
    \x04\x06\x12\x04\xdd\x01\r\x1a\n\r\n\x05\x04\x1d\x02\x04\x01\x12\x04\xdd\
    \x01\x1b\x1e\n\r\n\x05\x04\x1d\x02\x04\x03\x12\x04\xdd\x01!\"\n\x0c\n\
    \x04\x04\x1d\x02\x05\x12\x04\xde\x01\x04%\n\r\n\x05\x04\x1d\x02\x05\x04\
    \x12\x04\xde\x01\x04\x0c\n\r\n\x05\x04\x1d\x02\x05\x06\x12\x04\xde\x01\r\
    \x1b\n\r\n\x05\x04\x1d\x02\x05\x01\x12\x04\xde\x01\x1c\x20\n\r\n\x05\x04\
    \x1d\x02\x05\x03\x12\x04\xde\x01#$\n\x0c\n\x02\x04\x1e\x12\x06\xe0\x01\0\
    \xe4\x01\x01\n\x0b\n\x03\x04\x1e\x01\x12\x04\xe0\x01\x08\x1a\n\x0c\n\x04\
    \x04\x1e\x02\0\x12\x04\xe1\x01\x04\x1e\n\r\n\x05\x04\x1e\x02\0\x04\x12\
    \x04\xe1\x01\x04\x0c\n\r\n\x05\x04\x1e\x02\0\x05\x12\x04\xe1\x01\r\x11\n\
    \r\n\x05\x04\x1e\x02\0\x01\x12\x04\xe1\x01\x12\x19\n\r\n\x05\x04\x1e\x02\
    \0\x03\x12\x04\xe1\x01\x1c\x1d\n\x0c\n\x04\x04\x1e\x02\x01\x12\x04\xe2\
    \x01\x04+\n\r\n\x05\x04\x1e\x02\x01\x04\x12\x04\xe2\x01\x04\x0c\n\r\n\
    \x05\x04\x1e\x02\x01\x06\x12\x04\xe2\x01\r\x1e\n\r\n\x05\x04\x1e\x02\x01\
    \x01\x12\x04\xe2\x01\x1f&\n\r\n\x05\x04\x1e\x02\x01\x03\x12\x04\xe2\x01)\
    *\n\x0c\n\x04\x04\x1e\x02\x02\x12\x04\xe3\x01\x04\"\n\r\n\x05\x04\x1e\
    \x02\x02\x04\x12\x04\xe3\x01\x04\x0c\n\r\n\x05\x04\x1e\x02\x02\x05\x12\
    \x04\xe3\x01\r\x13\n\r\n\x05\x04\x1e\x02\x02\x01\x12\x04\xe3\x01\x14\x1d\
    \n\r\n\x05\x04\x1e\x02\x02\x03\x12\x04\xe3\x01\x20!\n\x1f\n\x02\x04\x1f\
    \x12\x06\xe7\x01\0\xeb\x01\x01\x1a\x11\x20Commit\x20Response\n\n\x0b\n\
    \x03\x04\x1f\x01\x12\x04\xe7\x01\x08\x15\n\x0c\n\x04\x04\x1f\x02\0\x12\
    \x04\xe8\x01\x04\x1e\n\r\n\x05\x04\x1f\x02\0\x04\x12\x04\xe8\x01\x04\x0c\
    \n\r\n\x05\x04\x1f\x02\0\x05\x12\x04\xe8\x01\r\x11\n\r\n\x05\x04\x1f\x02\
    \0\x01\x12\x04\xe8\x01\x12\x19\n\r\n\x05\x04\x1f\x02\0\x03\x12\x04\xe8\
    \x01\x1c\x1d\n\x0c\n\x04\x04\x1f\x02\x01\x12\x04\xe9\x01\x04#\n\r\n\x05\
    \x04\x1f\x02\x01\x04\x12\x04\xe9\x01\x04\x0c\n\r\n\x05\x04\x1f\x02\x01\
    \x05\x12\x04\xe9\x01\r\x12\n\r\n\x05\x04\x1f\x02\x01\x01\x12\x04\xe9\x01\
    \x13\x1e\n\r\n\x05\x04\x1f\x02\x01\x03\x12\x04\xe9\x01!\"\n\x0c\n\x04\
    \x04\x1f\x02\x02\x12\x04\xea\x01\x04\"\n\r\n\x05\x04\x1f\x02\x02\x04\x12\
    \x04\xea\x01\x04\x0c\n\r\n\x05\x04\x1f\x02\x02\x05\x12\x04\xea\x01\r\x13\
    \n\r\n\x05\x04\x1f\x02\x02\x01\x12\x04\xea\x01\x14\x1d\n\r\n\x05\x04\x1f\
    \x02\x02\x03\x12\x04\xea\x01\x20!\n\x0c\n\x02\x04\x20\x12\x06\xed\x01\0\
    \xf0\x01\x01\n\x0b\n\x03\x04\x20\x01\x12\x04\xed\x01\x08\x20\n\x0c\n\x04\
    \x04\x20\x02\0\x12\x04\xee\x01\x04,\n\r\n\x05\x04\x20\x02\0\x04\x12\x04\
    \xee\x01\x04\x0c\n\r\n\x05\x04\x20\x02\0\x06\x12\x04\xee\x01\r\x1f\n\r\n\
    \x05\x04\x20\x02\0\x01\x12\x04\xee\x01\x20'\n\r\n\x05\x04\x20\x02\0\x03\
    \x12\x04\xee\x01*+\n\x0c\n\x04\x04\x20\x02\x01\x12\x04\xef\x01\x04*\n\r\
    \n\x05\x04\x20\x02\x01\x04\x12\x04\xef\x01\x04\x0c\n\r\n\x05\x04\x20\x02\
    \x01\x06\x12\x04\xef\x01\r\x1a\n\r\n\x05\x04\x20\x02\x01\x01\x12\x04\xef\
    \x01\x1b%\n\r\n\x05\x04\x20\x02\x01\x03\x12\x04\xef\x01()\n_\n\x02\x04!\
    \x12\x06\xf5\x01\0\xf8\x01\x01\x1a!\x20Create\x20a\x20DC\x20with\x20mult\
    iple\x20nodes\n2.------------\x20Cluster\x20Management\x20API\x20-------\
    --\n\n\x0b\n\x03\x04!\x01\x12\x04\xf5\x01\x08\x13\nW\n\x04\x04!\x02\0\
    \x12\x04\xf7\x01\x02\x1c\x1aI\x20name\x20of\x20antidote\x20nodes\x20of\
    \x20the\x20form\x20'antidote@hostname'\x20or\x20'antidote@ip'\n\n\r\n\
    \x05\x04!\x02\0\x04\x12\x04\xf7\x01\x02\n\n\r\n\x05\x04!\x02\0\x05\x12\
    \x04\xf7\x01\x0b\x11\n\r\n\x05\x04!\x02\0\x01\x12\x04\xf7\x01\x12\x17\n\
    \r\n\x05\x04!\x02\0\x03\x12\x04\xf7\x01\x1a\x1b\n\x0c\n\x02\x04\"\x12\
    \x06\xfa\x01\0\xfd\x01\x01\n\x0b\n\x03\x04\"\x01\x12\x04\xfa\x01\x08\x17\
    \n\x0c\n\x04\x04\"\x02\0\x12\x04\xfb\x01\x02\x1c\n\r\n\x05\x04\"\x02\0\
    \x04\x12\x04\xfb\x01\x02\n\n\r\n\x05\x04\"\x02\0\x05\x12\x04\xfb\x01\x0b\
    \x0f\n\r\n\x05\x04\"\x02\0\x01\x12\x04\xfb\x01\x10\x17\n\r\n\x05\x04\"\
    \x02\0\x03\x12\x04\xfb\x01\x1a\x1b\n\x0c\n\x04\x04\"\x02\x01\x12\x04\xfc\
    \x01\x02\x20\n\r\n\x05\x04\"\x02\x01\x04\x12\x04\xfc\x01\x02\n\n\r\n\x05\
    \x04\"\x02\x01\x05\x12\x04\xfc\x01\x0b\x11\n\r\n\x05\x04\"\x02\x01\x01\
    \x12\x04\xfc\x01\x12\x1b\n\r\n\x05\x04\"\x02\x01\x03\x12\x04\xfc\x01\x1e\
    \x1f\nO\n\x02\x04#\x12\x06\x80\x02\0\x81\x02\x01\x1aA\x20Get\x20a\x20con\
    nection\x20descriptor\x20of\x20the\x20DC\x20to\x20be\x20given\x20to\x20o\
    ther\x20DCs.\n\n\x0b\n\x03\x04#\x01\x12\x04\x80\x02\x08\"\n\x0c\n\x02\
    \x04$\x12\x06\x83\x02\0\x88\x02\x01\n\x0b\n\x03\x04$\x01\x12\x04\x83\x02\
    \x08&\n\x0c\n\x04\x04$\x02\0\x12\x04\x84\x02\x02\x1c\n\r\n\x05\x04$\x02\
    \0\x04\x12\x04\x84\x02\x02\n\n\r\n\x05\x04$\x02\0\x05\x12\x04\x84\x02\
    \x0b\x0f\n\r\n\x05\x04$\x02\0\x01\x12\x04\x84\x02\x10\x17\n\r\n\x05\x04$\
    \x02\0\x03\x12\x04\x84\x02\x1a\x1b\n?\n\x04\x04$\x02\x01\x12\x04\x86\x02\
    \x02\x17\x1a1structure\x20of\x20descriptor\x20is\x20internal\x20to\x20an\
    tidote.\n\n\r\n\x05\x04$\x02\x01\x04\x12\x04\x86\x02\x02\n\n\r\n\x05\x04\
    $\x02\x01\x05\x12\x04\x86\x02\x0b\x10\n\r\n\x05\x04$\x02\x01\x01\x12\x04\
    \x86\x02\x11\x12\n\r\n\x05\x04$\x02\x01\x03\x12\x04\x86\x02\x15\x16\n\
    \x0c\n\x04\x04$\x02\x02\x12\x04\x87\x02\x02\x20\n\r\n\x05\x04$\x02\x02\
    \x04\x12\x04\x87\x02\x02\n\n\r\n\x05\x04$\x02\x02\x05\x12\x04\x87\x02\
    \x0b\x11\n\r\n\x05\x04$\x02\x02\x01\x12\x04\x87\x02\x12\x1b\n\r\n\x05\
    \x04$\x02\x02\x03\x12\x04\x87\x02\x1e\x1f\ng\n\x02\x04%\x12\x06\x8c\x02\
    \0\x8f\x02\x01\x1aY\x20Connect\x20DC\x20with\x20each\x20other\x20to\x20s\
    tart\x20replication.\n\x20This\x20message\x20must\x20be\x20send\x20to\
    \x20all\x20DCs.\n\n\x0b\n\x03\x04%\x01\x12\x04\x8c\x02\x08\x17\n\x82\x01\
    \n\x04\x04%\x02\0\x12\x04\x8e\x02\x04#\x1at\x20descriptors\x20is\x20a\
    \x20list\x20of\x20connection\x20information\x20of\x20all\x20DCs\x20obtai\
    ned\x20from\x20ApbGetConnectionDescriptorResp.descriptor\n\n\r\n\x05\x04\
    %\x02\0\x04\x12\x04\x8e\x02\x04\x0c\n\r\n\x05\x04%\x02\0\x05\x12\x04\x8e\
    \x02\r\x12\n\r\n\x05\x04%\x02\0\x01\x12\x04\x8e\x02\x13\x1e\n\r\n\x05\
    \x04%\x02\0\x03\x12\x04\x8e\x02!\"\n\x0c\n\x02\x04&\x12\x06\x91\x02\0\
    \x94\x02\x01\n\x0b\n\x03\x04&\x01\x12\x04\x91\x02\x08\x1b\n\x0c\n\x04\
    \x04&\x02\0\x12\x04\x92\x02\x02\x1c\n\r\n\x05\x04&\x02\0\x04\x12\x04\x92\
    \x02\x02\n\n\r\n\x05\x04&\x02\0\x05\x12\x04\x92\x02\x0b\x0f\n\r\n\x05\
    \x04&\x02\0\x01\x12\x04\x92\x02\x10\x17\n\r\n\x05\x04&\x02\0\x03\x12\x04\
    \x92\x02\x1a\x1b\n\x0c\n\x04\x04&\x02\x01\x12\x04\x93\x02\x02\x20\n\r\n\
    \x05\x04&\x02\x01\x04\x12\x04\x93\x02\x02\n\n\r\n\x05\x04&\x02\x01\x05\
    \x12\x04\x93\x02\x0b\x11\n\r\n\x05\x04&\x02\x01\x01\x12\x04\x93\x02\x12\
    \x1b\n\r\n\x05\x04&\x02\x01\x03\x12\x04\x93\x02\x1e\x1f\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
